#+TITLE:     My Emacs Configuration
#+AUTHOR:    joe di castro
#+EMAIL:     joe@joedicastro.com
#+DATE:      2014-03-09
#+LANGUAGE:  en
#+OPTIONS: toc:nil
#+PROPERTY: header-args :tangle init.el :comments org

#+ATTR_HTML: :width 110px
[[file:img/emacs.png]][fn:1]

* Emacs Configuration using Org-Babel

*This is a work in progress, and is far from being ended*

This repository contains the setup I use to customize Emacs. The
configuration uses [[http://orgmode.org/][Org-Mode]], [[http://orgmode.org/worg/org-contrib/babel/][Org-Babel]] and [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate Programming]] to
manage all the settings in a unique Org Mode file.

** How it works

It uses one of the standard Emacs init files, =init.el= to load all
the configuration. This configuration is thought to be stored in the
standard =~/.emacs.d= directory and to setup this configuration you
need to symlink this =emacs= directory to that. The
=~/.emacs.d/init.el= comes from all the code blocks of this file
=~/emacs.d/readme.org= exported in a process that is called
"tangling". If a block is marked with =:tangle no= it will be
skipped. The tangling is made automatically each time that the
=readme.el= changes, via a hook, to ensure that both files are synced.

This is the hook to tangle a new =~/.emacs.d/init.el= each time that
this file changes.

#+BEGIN_SRC emacs-lisp
    ;; originaly seen at https://github.com/larstvei/dot-emacs/blob/master/init.org
    (defun joe/tangle-init ()
      "If the current buffer is 'readme.org' the code-blocks are
       tangled, and the tangled file is compiled."
      (when (or
               (equal (buffer-file-name)
                   (expand-file-name (concat user-emacs-directory "readme.org")))
               (equal (buffer-file-name)
                   (expand-file-name "~/dotfiles/emacs/readme.org")))
        (org-babel-tangle)))
        ;; (byte-compile-file (concat user-emacs-directory "init.el"))))

    (add-hook 'after-save-hook 'joe/tangle-init)
#+END_SRC

The cool thing about this setup is that you can export the same file
as documentation to HTML or PDF or LaTeX quite easily, e.g. to do it
from Org mode directly press =C-c C-e=, choose =h= and then one of the
options to produce HTML output. At the same time it makes the
configuration management a delight, been pretty easy to find any
setting and organize them.

#+TOC: headlines 4
* TODO Prerequisites

This is a list of applications that need to be installed previously to
enjoy all the goodies of this configuration.

- [[http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack][Ag (aka "The Silver Searcher")]]
- [[http://www.mupdf.com/][MuPDF]]
- [[http://git-scm.com/][git]]
- [[http://w3m.sourceforge.net/][w3m]]
- [[https://github.com/djcb/mu][mu]] (also a tool to fetch mail like [[http://pyropus.ca/software/getmail/][getmail]] or [[http://offlineimap.org/][OfflineImap]])
- [[http://surfraw.alioth.debian.org/][surfraw]]
- [[http://www.zx2c4.com/projects/password-store/][pass]]
- [[https://www.gnupg.org/][GnuPG]]

* Packages setup
** Packages list

The list of packages to install in a fresh installation. The way to
maintain clean and updated this list for me is the following:

- Install a package from the =package.el= built-in interface via =M-x list-packages=
- Test it
  - If seems Ok and I want to use it regularly, add it to the list.
  - If I don't like it, delete the plugin directory in the =~/.emacs.d/elpa= tree.
    I don't care too much about other dependecies that could be also
    installed, I'll get rid of them in the next clean install.

#+BEGIN_SRC emacs-lisp
    ; A package for line helps to mantain the list
    (setq my-packages
        '(
            ag
            async
            auto-complete
            browse-kill-ring
            buffer-move
            calfw
            charmap
            diff-hl
            elfeed
            evil
            evil-indent-textobject
            evil-leader
            evil-matchit
            evil-nerd-commenter
            fill-column-indicator
            flatland-theme
            git-commit-mode
            git-rebase-mode
            gitconfig-mode
            gitignore-mode
            google-maps
            graphviz-dot-mode
            helm
            haskell-mode
            ibuffer-vc
            ido-ubiquitous
            ido-vertical-mode
            ido-yes-or-no
            ipython
            jedi
            load-theme-buffer-local
            magit
            markdown-mode
            moe-theme
            monokai-theme
            mu4e-maildirs-extension
            multi-term
            org-plus-contrib
            paradox
            password-store
            perspective
            pretty-mode
            popwin
            rainbow-mode
            rw-ispell
            rw-hunspell
            rw-language-and-country-codes
            smart-mode-line
            smartparens
            smex
            sublime-themes
            surround
            swoop
            twittering-mode
            ujelly-theme
            undo-tree
            w3m
            yasnippet
    ))
#+END_SRC

** Repositories

The ELPA repositories from where the packages are fetched.

#+BEGIN_SRC emacs-lisp
    (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("org" . "http://orgmode.org/elpa/")
                             ("melpa" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

** Auto-installation

The auto-installation process for all the packages that are not
already installed. This is for bootstrap a fresh install.

#+BEGIN_SRC emacs-lisp
    ;;; initialize the packages and create the packages list if not exists
    (package-initialize)
    (when (not package-archive-contents)
      (package-refresh-contents))

    ;;; install packages if not exists
    (dolist (pkg my-packages)
      (when (and (not (package-installed-p pkg))
               (assoc pkg package-archive-contents))
        (package-install pkg)))
#+END_SRC

*** Errors after compling in a fresh installation

   Some packages (e.g. /org-plus-contrib/) can be broken after
   automatic compilation via =package.el=

   To solve this issue we can proceed as follow:

   - Remove all the compiled files (=*.elc=) from the folder
   - Recompile the directory again whith this:

#+BEGIN_EXAMPLE emacs-lisp
    (byte-recompile-directory (expand-file-name "~/.emacs.d/elpa/org-plug-contrib") 0)
#+END_EXAMPLE

** Updating Packages

Requires to do it manually, but is a pretty easy task!

1. execute the command =M-x list-packages= which will automatically refresh the package list
2. press the key =U= to mark all upgradable packages to be upgraded
3. finally press the =x= key to actually perform the new updates

Emacs will then fetch and install all upgrades, and ask you to whether
to remove the old, obsolete versions afterwards.

* General Behaviour

| Binding | Call               | Do                                            |
|---------+--------------------+-----------------------------------------------|
| C-w     | backward-kill-word | Kill the entire previous (to the cursor) word |

** Encoding

Make sure that UTF-8 is used everywhere.

#+BEGIN_SRC emacs-lisp
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-language-environment 'utf-8)
    (prefer-coding-system 'utf-8)
    (setq locale-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (set-input-method nil)
#+END_SRC

** Temporal directory

I like to keep all of the temporal files and dirs (cache, backups,
...) in an unique directory. If this directory does not exists, then
create it

#+BEGIN_SRC emacs-lisp
     (unless (file-exists-p "~/.emacs.d/tmp")
        (make-directory "~/.emacs.d/tmp"))
#+END_SRC

** Disable auto-save files

I prefer to use a undo-tree with branches that store auto-save files.

#+BEGIN_SRC emacs-lisp
    (setq auto-save-default nil)
    (setq auto-save-list-file-prefix nil)
#+END_SRC

** Disable Backups

Because I'm using gpg to authetication and encrypt/sign files, is more
secure don't have a plaint text backup of those files. Use a DVCS and
backup your files regularly, for God's sake!

#+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil)
#+END_SRC

** History

Maintain a history of past actions.

#+BEGIN_SRC emacs-lisp
    (setq savehist-file "~/.emacs.d/tmp/history")
    (setq-default history-length 1000)
    (savehist-mode t)
    (setq savehist-save-minibuffer-history 1)
    (setq savehist-additional-variables
          '(kill-ring
            search-ring
            regexp-search-ring))
#+END_SRC

** Show matching parenthesis

Show the matching parenthesis when the cursor is above one of them.

#+BEGIN_SRC emacs-lisp
    (setq show-paren-delay 0)
    (show-paren-mode t)
#+END_SRC

** Toggle show trailing white-spaces

Show/hide the trailing white-spaces in the buffer.

#+BEGIN_SRC emacs-lisp
    ;; from http://stackoverflow.com/a/11701899/634816
    (defun joe/toggle-show-trailing-whitespace ()
      "Toggle show-trailing-whitespace between t and nil"
      (interactive)
      (setq show-trailing-whitespace (not show-trailing-whitespace)))
#+END_SRC

** Always indent with spaces

No more tabs, please, use damn spaces, for God's sake!

#+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default default-tab-width 4)
#+END_SRC

** Replace yes/no questions with y/n

Less keystrokes, I already press enough keys along the day.

#+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Mondays are the first day of the week (for M-x calendar)

Set the calendar to my country's calendar standards

#+BEGIN_SRC emacs-lisp
    (setq-default calendar-week-start-day 1)
    (setq calendar-latitude 43.36)
    (setq calendar-longitude 8.38)
    (setq calendar-location-name "A Coru√±a, Spain")
#+END_SRC

** Use undo-tree for better undo

Emacs's undo system allows you to recover any past state of a buffer
(the standard undo/redo system loses any "redoable" states whenever
you make an edit). However, Emacs's solution, to treat "undo" itself
as just another editing action that can be undone, can be confusing
and difficult to use.

Both the loss of data with standard undo/redo and the confusion of
Emacs' undo stem from trying to treat undo history as a linear
sequence of changes. =undo-tree-mode= instead treats undo history as
what it is: a branching tree of changes (the same system that Vim has
had for some time now). This makes it substantially easier to undo and
redo any change, while preserving the entire history of past states.

#+BEGIN_SRC emacs-lisp
    (require 'undo-tree)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/tmp/undo")))
    (setq undo-tree-visualizer-timestamps t)
    (global-undo-tree-mode)
#+END_SRC

** Recent files

Recentf is a minor mode that builds a list of recently opened
files. This list is is automatically saved across Emacs sessions. You
can then access this list through a menu.

#+BEGIN_SRC emacs-lisp
    (require 'recentf)
    (setq recentf-save-file "~/.emacs.d/tmp/recentf")
    (recentf-mode t)
    (setq recentf-max-saved-items 50)
#+END_SRC

** Keep session between emacs runs (Desktop)

Desktop Save Mode is a feature to save the state of Emacs from one
session to another.

#+BEGIN_SRC emacs-lisp
    (require 'desktop)
    (setq desktop-path '("~/.emacs.d/tmp/"))
    (setq desktop-dirname "~/.emacs.d/tmp/")
    (setq desktop-base-file-name "emacs-desktop")
    (setq desktop-globals-to-save
          (append '((extended-command-history . 50)
                    (file-name-history . 200)
                    (grep-history . 50)
                    (compile-history . 50)
                    (minibuffer-history . 100)
                    (query-replace-history . 100)
                    (read-expression-history . 100)
                    (regexp-history . 100)
                    (regexp-search-ring . 100)
                    (search-ring . 50)
                    (shell-command-history . 50)
                    tags-file-name
                    register-alist)))
    (desktop-save-mode 1)
#+END_SRC

** Remove beep

Remove the annoying beep.

#+BEGIN_SRC emacs-lisp
    (setq visible-bell t)
#+END_SRC

** Winner-mode

Winner mode lets you revert to a previous windows configuration.

| Binding | Call        | Do                                                                  |
|---------+-------------+---------------------------------------------------------------------|
| C-c ‚Üê   | winner-undo | Switch back to an earlier window configuration saved by Winner mode |
| C-c ‚Üí   | winner-redo | Restore a more recent window configuration saved by Winner mode     |

#+BEGIN_SRC emacs-lisp
    (winner-mode t)
#+END_SRC

** Open large files

Warn only when opening files bigger than 100MB

#+BEGIN_SRC emacs-lisp
    (setq large-file-warning-threshold 100000000)
#+END_SRC

** Save cursor position across sessions

Save the cursor position for every file you opened. So, next
time you open the file, the cursor will be at the position you last
opened it.

#+BEGIN_SRC emacs-lisp
    (require 'saveplace)
    (setq save-place-file (concat user-emacs-directory "tmp/saveplace.el") )
    (setq-default save-place t)
#+END_SRC

** Tramp

Store the Tramp history in the temporal directory.

#+BEGIN_SRC emacs-lisp
  (setq tramp-persistency-file-name (concat user-emacs-directory "tmp/tramp"))
#+END_SRC

** Bookmarks

Store the Bookmarks file in the temporal directory.

#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file (concat user-emacs-directory "tmp/bookmarks"))
#+END_SRC

** SemanticDB

Store the SemanticDB files in the temporal directory.

#+BEGIN_SRC emacs-lisp
  (setq semanticdb-default-save-directory (concat user-emacs-directory "tmp/semanticdb"))
#+END_SRC

** Url

Store the url files in the temporal directory.

#+BEGIN_SRC emacs-lisp
  (setq url-configuration-directory (concat user-emacs-directory "tmp/url"))
#+END_SRC

** Kill internal processes via the =list process= buffer

Add a functionality to be able to kill process directly in the =list process'= buffer

#+BEGIN_src emacs-lisp
;; seen at http://stackoverflow.com/a/18034042
    (define-key process-menu-mode-map (kbd "C-c k") 'joe/delete-process-at-point)

    (defun joe/delete-process-at-point ()
      (interactive)
      (let ((process (get-text-property (point) 'tabulated-list-id)))
        (cond ((and process
                    (processp process))
               (delete-process process)
               (revert-buffer))
              (t
               (error "no process at point!")))))
#+END_src

** TODO Use ibuffer by default

Ibuffer is an advanced replacement for BufferMenu, which lets you
operate on buffers much in the same manner as Dired.

#+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
#+END_SRC

*** User ibuffer-vc by default

[[https://github.com/purcell/ibuffer-vc][ibuffer-vc]] show the buffers grouped by the associated version control
project.

#+BEGIN_SRC emacs-lisp
    (add-hook 'ibuffer-hook
        (lambda ()
            (ibuffer-vc-set-filter-groups-by-vc-root)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))


    (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
            (name 18 18 :left :elide)
            " "
            (size 9 -1 :right)
            " "
            (mode 16 16 :left :elide)
            " "
            (vc-status 16 16 :left)
            " "
            filename-and-process)))
#+END_SRC

* Aesthetics

You don't only want to have a beast to edit, you want a good looking
one too!

** Remove the welcome screen

The welcome screen is for guests only, I'm in home now!

#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
#+END_SRC

** Remove the message in the scratch buffer

Idem as above for the same reasons.

#+BEGIN_SRC emacs-lisp
    (setq initial-scratch-message "")
#+END_SRC

** A cleaner frame

I prefer more screen space and less annoying menus, bars and scroll
bars.

*** Hide the menu bar

#+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
#+END_SRC

*** Hide the tool bar

#+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
#+END_SRC

*** Hide the scroll bar

#+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
#+END_SRC

** Color Theme

Here I define the default theme, a total subjective decision, of
course.

*Remember: when testing a new theme, disable before the current one*

#+BEGIN_SRC emacs-lisp
    (load-theme 'monokai t)
#+END_SRC

** Mode Line

Settings for the mode line

*** Show the column number

#+BEGIN_SRC emacs-lisp
     (column-number-mode t)
#+END_SRC

*** Show the buffer size (bytes)

#+BEGIN_SRC emacs-lisp
    (setq size-indication-mode t)
#+END_SRC

*** Show the current function

This is very useful in programming and also to see the headers in
outlines modes.

#+BEGIN_SRC emacs-lisp
    (which-function-mode 1)
#+END_SRC

*** Smart mode line

This package shows a very nice and very informativa mode line.

#+BEGIN_SRC emacs-lisp
    ;; to avoid the annoying confirmation question at the beginning
    (custom-set-variables
     '(custom-safe-themes
        (quote
          ("6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" default))))

    ;;; smart-mode-line
    (require 'smart-mode-line)
    (setq sml/mode-width 'full)
    (setq sml/name-width 30)
    (setq sml/shorten-modes t)
    (sml/setup)
#+END_SRC

** Font

The font to use. I choose monospace and /Dejavu Sans Mono/ because is
an open font and has the best Unicode support, and looks very fine to me too!

#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :family "Dejavu Sans Mono" :height 110)
#+END_SRC

*** Font Fallback for Unicode

Set a font with great support for Unicode Symbols
to fallback in those case where certain Unicode glyphs are
missing in the current font.

#+BEGIN_SRC emacs-lisp
    (set-fontset-font "fontset-default" nil
                      (font-spec :size 20 :name "Symbola"))
#+END_SRC

** Cursor not blinking

The blinking cursor is pretty annoying, so disable it.

#+BEGIN_SRC emacs-lisp
    (blink-cursor-mode -1)
#+END_SRC

** Highlight the current line

To help us to locate where the cursor is.

#+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)
#+END_SRC

** Show empty lines

This option show the empty lines at the end (bottom) of the buffer.

#+BEGIN_SRC emacs-lisp
    (toggle-indicate-empty-lines)
#+END_SRC

** Pretty mode

Use mathematical *Unicode* /symbols/ instead of expressions or keywords in
some programming languages

#+BEGIN_SRC emacs-lisp
    (global-pretty-mode t)
#+END_SRC

** Better line numbers

Display a more appealing line numbers.

#+BEGIN_SRC emacs-lisp
    ; 2014-04-04: Holy moly its effort to get line numbers like vim!
    ; http://www.emacswiki.org/emacs/LineNumbers#toc6
    (unless window-system
      (add-hook 'linum-before-numbering-hook
    (lambda ()
    (setq-local linum-format-fmt
    (let ((w (length (number-to-string
    (count-lines (point-min) (point-max))))))
    (concat "%" (number-to-string w) "d"))))))

    (defun joe/linum-format-func (line)
      (concat
       (propertize (format linum-format-fmt line) 'face 'linum)
       (propertize " " 'face 'linum)))

    (unless window-system
      (setq linum-format 'joe/linum-format-func))
#+END_SRC

** Show fill column

Toggle the vertical column that indicates the fill threshold.

#+BEGIN_SRC emacs-lisp
    (require 'fill-column-indicator)
    (fci-mode)
    (setq fci-rule-column 79)
#+END_SRC

** More thinner window divisions

The default windows divisions are more uglier than sin.

#+BEGIN_SRC emacs-lisp
    (fringe-mode '(1 . 1))
#+END_SRC

* Edition

Some general edition improvements.

** TODO Auto-completion

Auto Complete Mode (aka =auto-complete.el=, =auto-complete-mode=) is a
extension that automates and advances completion-system.

#+BEGIN_SRC emacs-lisp
    (require 'auto-complete)
    (global-auto-complete-mode)
    (setq ac-use-menu-map t)
    ;; Default settings
    (define-key ac-menu-map "\C-n" 'ac-next)
    (define-key ac-menu-map "\C-p" 'ac-previous)
    (setq ac-ignore-case 'smart)
#+END_SRC

*** enable it globally

Make it available everywhere.

#+BEGIN_SRC emacs-lisp
    (defun joe/auto-complete-mode-maybe ()
      "No maybe for you. Only AC!"
      (unless (minibufferp (current-buffer))
        (auto-complete-mode 1)))
    (joe/auto-complete-mode-maybe)
#+END_SRC

*** auto-complete file

The file where store the history of auto-complete.

#+BEGIN_SRC emacs-lisp
(setq ac-comphist-file (concat user-emacs-directory
             "temp/ac-comphist.dat"))
#+END_SRC

** Delete after insertion over selection

Delete the previous selection when overrides it with a new insertion.

#+BEGIN_SRC emacs-lisp
    (delete-selection-mode)
#+END_SRC

** TODO Basic indentation

#+BEGIN_SRC emacs-lisp
    (setq-default c-basic-offset 4)
#+END_SRC

** Smartparens

Minor mode for Emacs that deals with parens pairs and tries to be
smart about it.

#+BEGIN_SRC emacs-lisp
    (require 'smartparens-config)
    (smartparens-global-mode)
#+END_SRC

** Backward-kill-word as alternative to Backspace

Kill the entire word instead of hitting Backspace key several
times. To do this will bind the =backward-kill-region= function to the
=C-w= key combination

#+BEGIN_SRC emacs-lisp
    (global-set-key "\C-w" 'backward-kill-word)
#+END_SRC

*** Rebind the original C-w binding

Now we reasigne the original binding to that combination to a new one

#+BEGIN_SRC emacs-lisp
    (global-set-key "\C-x\C-k" 'kill-region)
    (global-set-key "\C-c\C-k" 'kill-region)
#+END_SRC

** Spell checking

Activate Spell Checking by default. Also use [[http://hunspell.sourceforge.net/][hunspell]] instead of
[[http://www.gnu.org/software/ispell/ispell.html][ispell]] as corrector.

#+BEGIN_SRC emacs-lisp
    ;; ;; Use hunspell instead of ispell
    (setq ispell-program-name "hunspell")
    (require 'rw-language-and-country-codes)
    (require 'rw-ispell)
    (require 'rw-hunspell)
    (setq ispell-dictionary "es_ES_hunspell")
    ;; The following is set via custom
    (custom-set-variables
     '(rw-hunspell-default-dictionary "es_ES_hunspell")
     '(rw-hunspell-dicpath-list (quote ("/usr/share/hunspell")))
     '(rw-hunspell-make-dictionary-menu t)
     '(rw-hunspell-use-rw-ispell t)
    )

    (defun joe/turn-on-spell-check ()
           (flyspell-mode 1))

    ;; enable spell-check in certain modes
    (add-hook 'markdown-mode-hook 'joe/turn-on-spell-check)
    (add-hook 'text-mode-hook 'joe/turn-on-spell-check)
    (add-hook 'org-mode-hook 'joe/turn-on-spell-check)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

* Vim-like Features

For those who came from Vim is more easy to use something alike

** Use evil

[[https://gitorious.org/evil/pages/Home][Evil]] is an extensible vi layer for Emacs. It emulates the main
features of Vim, and provides facilities for writing custom
extensions.

| Binding | Call                     | Do                                                           |
|---------+--------------------------+--------------------------------------------------------------|
| C-z     | evil-emacs-state         | Toggle evil-mode                                             |

#+BEGIN_SRC emacs-lisp
    (setq evil-shift-width 4)
    (require 'evil)
    (evil-mode 1)
#+END_SRC

*** ESC quits almost everywhere

Gotten from [[http://stackoverflow.com/questions/8483182/emacs-evil-mode-best-practice][here]], trying to emulate the Vim behaviour

#+BEGIN_SRC emacs-lisp
    ;;; esc quits
    (define-key evil-normal-state-map [escape] 'keyboard-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

*** Move along windows

To move along windows more easily mimicking my Vim configuration

#+BEGIN_SRC emacs-lisp
    (require 'windmove)
    (define-key evil-normal-state-map "\C-j" 'windmove-down)
    (define-key evil-normal-state-map "\C-k" 'windmove-up)
    (define-key evil-normal-state-map "\C-h" 'windmove-left)
    (define-key evil-normal-state-map "\C-l" 'windmove-right)
    (define-key evil-motion-state-map "\C-j" 'windmove-down)
    (define-key evil-motion-state-map "\C-k" 'windmove-up)
    (define-key evil-motion-state-map "\C-h" 'windmove-left)
    (define-key evil-motion-state-map "\C-l" 'windmove-right)
#+END_SRC

*** Buffer movements

To move the buffers between windows easily.

#+BEGIN_SRC emacs-lisp
    (require 'buffer-move)
    (define-key evil-normal-state-map (kbd "C-M-j") 'buf-move-down)
    (define-key evil-normal-state-map (kbd "C-M-k") 'buf-move-up)
    (define-key evil-normal-state-map (kbd "C-M-h") 'buf-move-left)
    (define-key evil-normal-state-map (kbd "C-M-l") 'buf-move-right)
    (define-key evil-motion-state-map (kbd "C-M-j") 'buf-move-down)
    (define-key evil-motion-state-map (kbd "C-M-k") 'buf-move-up)
    (define-key evil-motion-state-map (kbd "C-M-h") 'buf-move-left)
    (define-key evil-motion-state-map (kbd "C-M-l") 'buf-move-right)
#+END_SRC

*** Window resize

Resize windows in a easy way.

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-S-j") 'shrink-window)
    (define-key evil-normal-state-map (kbd "C-S-k") 'enlarge-window)
    (define-key evil-normal-state-map (kbd "C-S-h") 'shrink-window-horizontally)
    (define-key evil-normal-state-map (kbd "C-S-l") 'enlarge-window-horizontally)
    (define-key evil-motion-state-map (kbd "C-S-j") 'shrink-window)
    (define-key evil-motion-state-map (kbd "C-S-k") 'enlarge-window)
    (define-key evil-motion-state-map (kbd "C-S-h") 'shrink-window-horizontally)
    (define-key evil-motion-state-map (kbd "C-S-l") 'enlarge-window-horizontally)
#+END_SRC

*** TODO Org-mode customization

Custom bindings for /Org-mode/.

#+BEGIN_SRC emacs-lisp
    (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
    (evil-define-key 'normal org-mode-map (kbd "SPC") 'org-cycle)
    (evil-define-key 'normal org-mode-map (kbd "H") 'org-metaleft)
    (evil-define-key 'normal org-mode-map (kbd "L") 'org-metaright)
    (evil-define-key 'normal org-mode-map (kbd "K") 'org-metaup)
    (evil-define-key 'normal org-mode-map (kbd "J") 'org-metadown)
    (evil-define-key 'normal org-mode-map (kbd "U") 'org-shiftmetaleft)
    (evil-define-key 'normal org-mode-map (kbd "I") 'org-shiftmetaright)
    (evil-define-key 'normal org-mode-map (kbd "O") 'org-shiftmetaup)
    (evil-define-key 'normal org-mode-map (kbd "P") 'org-shiftmetadown)
    (evil-define-key 'normal org-mode-map (kbd "t")   'org-todo)
    (evil-define-key 'normal org-mode-map (kbd "-")   'org-cycle-list-bullet)

    (evil-define-key 'insert org-mode-map (kbd "C-c .")
      '(lambda () (interactive) (org-time-stamp-inactive t)))
#+END_SRC

*** Elfeed customization

Custom bindings for Elfeed.

#+BEGIN_SRC emacs-lisp
    ; elfeed-search
    (evil-define-key 'normal elfeed-search-mode-map (kbd "q") 'quit-window)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "a") 'elfeed-search-update--force)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "A") 'elfeed-update)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "s") 'elfeed-search-live-filter)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "RET") 'elfeed-search-show-entry)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "o") 'elfeed-search-browse-url)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "y") 'elfeed-search-yank)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "r") 'elfeed-search-untag-all-unread)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "u") 'elfeed-search-tag-all-unread)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "+") 'elfeed-search-tag-all)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "-") 'elfeed-search-untag-all)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "E") (lambda() (interactive)(find-file "~/.emacs.d/elfeed.el.gpg")))
    ; elfeed-show
    (evil-define-key 'normal elfeed-show-mode-map (kbd "q") 'elfeed-kill-buffer)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "g") 'elfeed-show-refresh)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "n") 'elfeed-show-next)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "p") 'elfeed-show-prev)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "o") 'elfeed-show-visit)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "y") 'elfeed-show-yank)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "u") (elfeed-expose #'elfeed-show-tag 'unread))
    (evil-define-key 'normal elfeed-show-mode-map (kbd "+") 'elfeed-show-tag)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "-") 'elfeed-show-untag)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "SPC") 'scroll-up)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "S-SPC") 'scroll-down)
#+END_SRC

*** Disable it in certain modes

#+BEGIN_SRC emacs-lisp
;  (evil-set-initial-state 'elfeed-search-mode 'emacs)
;  (evil-set-initial-state 'elfeed-show-mode 'emacs)
#+END_SRC

** evil-leader

[[https://github.com/cofi/evil-leader][Evil Leader]] provides the =<leader>= feature from Vim that provides an
easy way to bind keys under a variable prefix key. For an experienced
Emacs User it is nothing more than a convoluted key map, but for a
Evil user coming from Vim it means an easier start.

| Binding | Call                                | Do                                                              |
|---------+-------------------------------------+-----------------------------------------------------------------|
| ,0      | org-agenda                          | Call the org-mode agenda                                        |
| ,7      | mu4e                                | Start mu4e (email client)                                       |
| ,8      | org-capture                         | Call the org-mode capture                                       |
| ,9      | cfw:open-org-calendar               | Open the month calendar for org-mode                            |
| ,a      | ag                                  | Do a regex search using ag (The Silver Searcher)                |
| ,b      | ido-switch-buffer                   | Switch buffer                                                   |
| ,B      | ibuffer                             | Switch buffer using ibuffer                                     |
| ,c      | evilnc-comment-or-uncomment-lines   | Comment/Uncomment lines                                         |
| ,d      | dired                               | Call dired                                                      |
| ,ef     | variable-pitch-mode                 | Toggle variable/fixed space font                                |
| ,eh     | whitespace-mode                     | Show/Hide hidden chars                                          |
| ,et     | joe/toggle-show-trailing-whitespace | Show/Hide trailing whitespace                                   |
| ,ew     | whitespace-cleanup                  | Remove trailing whitespaces                                     |
| ,ec     | fci-mode                            | Show/hide fill column                                           |
| ,f      | swoop                               | Search through words within the current buffer                  |
| ,F      | swoop-multi                         | Search words across currently opened multiple buffers           |
| ,g      | magit-status                        | Call Magit                                                      |
| ,i      | browse-kill-ring                    | Choose between previous yanked pieces of text                   |
| ,k      | delete-window                       | Close a window                                                  |
| ,K      | kill-buffer                         | Kill a buffer                                                   |
| ,l      | linum-mode                          | Show/Hide line numbers                                          |
| ,m      | smex                                | Call smex (to execute a command)                                |
| ,M      | smex-major-mode-commands            | Idem as above but limited to the current major mode commands    |
| ,n      | elfeed                              | Open Elfeed to read Atom/RSS entries                            |
| ,o      | find-file                           | Open a file                                                     |
| ,O      | helm-recentf                        | Open a recent opened file                                       |
| ,q      | helm-surfraw                        | Search the web using [[http://surfraw.alioth.debian.org/][Surfraw]]                                    |
| ,``     | save-buffers-kill-terminal          | Exit Emacs                                                      |
| ,s      | split-window-vertically             | Split the selected window into two windows, one above the other |
| ,t      | twit                                | Open twittering-mode for an interface for twitter               |
| ,u      | undo-tree-visualize                 | Visualize the current buffer's undo tree                        |
| ,v      | split-window-horizontally           | Split the selected window into two side-by-side windows         |
| ,w      | save-buffer                         | Save current buffer in visited file if modified                 |
| ,x      | multi-term                          | Create new term buffer                                          |
| ,X      | multi-term-next                     | Go to the next term buffer                                      |
| ,z      | delete-other-windows                | Make a Zoom (delete all the other windows)                      |

#+BEGIN_SRC emacs-lisp
  (require 'evil-leader)
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    "0" 'org-agenda
    "7" 'mu4e
    "8" 'org-capture
    "9" 'cfw:open-org-calendar
    "a" 'ag
    "B" 'ibuffer
    "b" 'ido-switch-buffer
    "c" 'evilnc-comment-or-uncomment-lines
    "d" 'dired
    "ec" 'fci-mode
    "ef" 'variable-pitch-mode
    "eh" 'whitespace-mode
    "et" 'joe/toggle-show-trailing-whitespace
    "ew" 'whitespace-cleanup
    "f" 'swoop
    "F" 'swoop-multi
    "g" 'magit-status
    "i" 'browse-kill-ring
    "k" 'delete-window
    "K" 'kill-buffer
    "l" 'linum-mode
    "m" 'smex
    "M" 'smex-major-mode-commands
    "n" 'elfeed
    "o" 'find-file
    "O" 'helm-recentf
    "q" 'helm-surfraw
    "``" 'save-buffers-kill-terminal
    "s" 'split-window-vertically
    "t" 'twit
    "u" 'undo-tree-visualize
    "v" 'split-window-horizontally
    "w" 'save-buffer
    "x" 'multi-term
    "X" 'multi-term-next
    "z" 'delete-other-windows
   )
#+END_SRC

** evil-indent-textobject

Textobject for evil based on indentation, [[https://github.com/cofi/evil-indent-textobject][repository]]

#+BEGIN_SRC emacs-lisp
    (require 'evil-indent-textobject)
#+END_SRC

** evil-nerd-commenter

Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
[[https://github.com/redguardtoo/evil-nerd-commenter][Repository]]

#+BEGIN_SRC emacs-lisp
    (require 'evil-nerd-commenter)
#+END_SRC

** evil-surround

Use the [[https://github.com/timcharper/evil-surround][Surround]] plugin, the equivalent to the Vim one.

#+BEGIN_SRC emacs-lisp
    (require 'surround)
    (global-surround-mode 1)
#+END_SRC

* Browser

#+BEGIN_SRC emacs-lisp
;    (setq browse-url-browser-function 'w3m-browse-url)
;    (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
    (setq browse-url-browser-function 'browse-url-generic
           browse-url-generic-program "firefox")
    (setq w3m-default-display-inline-images t)
#+END_SRC

* Org-Mode

** Org-mode settings

*** Enable Org Mode

#+BEGIN_SRC emacs-lisp
    (require 'org)
#+END_SRC

*** TODO Org-mode modules

Set the modules enabled by default

#+BEGIN_SRC emacs-lisp
    (setq org-modules '(
        org-bbdb
        org-bibtex
        org-docview
        org-mhe
        org-rmail
        org-w3m
        org-crypt
        org-protocol
        org-gnus
        org-info
        org-habit
        org-irc
        org-annotate-file
        org-eval
        org-expiry
        org-man
        org-panel
        org-toc
    ))
#+END_SRC

*** Set default directories

#+BEGIN_SRC emacs-lisp
    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

*** Highlight code blocks syntax

#+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))
#+END_SRC

*** Tasks management

**** Record date and time when a task is marked as DONE

#+BEGIN_SRC emacs-lisp
    (setq org-log-done t)
#+END_SRC

**** Detect idle time when clock is running

#+BEGIN_SRC emacs-lisp
    (setq org-clock-idle-time 10)
#+END_SRC

*** Agenda & diary

**** Include diary entries
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-include-diary t)
#+END_SRC

**** Agenda files
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/org"))
#+END_SRC

*** Third Apps

**** Configure the external apps to open files
#+BEGIN_SRC emacs-lisp
     (setq org-file-apps
        '(("\\.pdf\\'" . "zathura %s")
          ("\\.gnumeric\\'" . "gnumeric %s")))
#+END_SRC

*** Protect hidden trees for being inadvertily edited

#+BEGIN_SRC emacs-lisp
    (setq org-catch-invisible-edits "error")
    (setq org-ctrl-k-protect-subtree "error")
#+END_SRC

*** Show images inline

Only works in GUI, but is a nice feature to have

#+BEGIN_SRC emacs-lisp
    (when (window-system)
        (setq org-startup-with-inline-images t))
#+END_SRC

**** Limit images width

#+BEGIN_SRC emacs-lisp
    (setq org-image-actual-width '(800))
#+END_SRC
** Org-Babel

[[http://orgmode.org/worg/org-contrib/babel/][Babel]] is Org-mode's ability to execute source code within Org-mode documents.

#+BEGIN_SRC emacs-lisp
    ;; languages supported
    (org-babel-do-load-languages
     (quote org-babel-load-languages)
     (quote (
            (calc . t)
            (clojure . t)
            (ditaa . t)
            (dot . t)
            (emacs-lisp . t)
            (gnuplot . t)
            (latex . t)
            (ledger . t)
            (octave . t)
            (org . t)
            (makefile . t)
            (plantuml . t)
            (python . t)
            (R . t)
            (ruby . t)
            (sh . t)
            (sqlite . t)
            (sql . nil))))
    (setq org-babel-python-command "python2")
#+END_SRC

*** Refresh images after execution

#+BEGIN_SRC emacs-lisp
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+END_SRC

*** Don't ask confirmation to execute "safe" languages

#+BEGIN_SRC emacs-lisp
    (defun joe/org-confirm-babel-evaluate (lang body)
                (and (not (string= lang "ditaa"))
                     (not (string= lang "dot"))
                     (not (string= lang "gnuplot"))
                     (not (string= lang "ledger"))
                     (not (string= lang "plantuml"))))
    (setq org-confirm-babel-evaluate 'joe/org-confirm-babel-evaluate)
#+END_SRC

** Org-location-google-maps

The google-maps Emacs extension allows to display Google Maps directly
inside Emacs and integrate them in org-mode as addresses.

#+BEGIN_SRC emacs-lisp
    (require 'google-maps)
    (require 'org-location-google-maps)
#+END_SRC

** Org-capture

Capture lets you quickly store notes with little interruption of your
work flowCapture lets you quickly store notes with little interruption
of your work flow

*** Org-protocol

org-protocol intercepts calls from emacsclient to trigger custom
actions without external dependencies. Only one protocol has to be
configured with your external applications or the operating system, to
trigger an arbitrary number of custom actions.

To use it to capture web urls and notes from Firefox, install this
[[http://chadok.info/firefox-org-capture/][Firefox extension]]


#+BEGIN_SRC emacs-lisp
    (server-start)
    (require 'org-protocol)

    (setq org-protocol-default-template-key "w")
    (setq org-capture-templates
          (quote
           (("w" "Web captures" entry (file+headline "~/org/notes.org" "Web")
             "* %^{Title}    %^G\n\n  Source: %u, %c\n\n  %i"
             :empty-lines 1))))
#+END_SRC

*** Org-contacts

The org-contacts Emacs extension allows to manage your contacts using
Org-mode.

#+BEGIN_SRC emacs-lisp
  (require 'org-contacts)
  (setq org-contacts-file "~/org/contacts.org")
  (setq org-contacts-matcher "EMAIL<>\"\"|ALIAS<>\"\"|PHONE<>\"\"|ADDRESS<>\"\"|BIRTHDAY")

  (add-to-list 'org-capture-templates
    '("p" "Contacts" entry (file "~/org/contacts.org")
       "** %(org-contacts-template-name)
       :PROPERTIES:%(org-contacts-template-email)
       :END:"))
#+END_SRC

*** TODO Other captures

#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates
        '("t" "TODO" entry (file+headline "~/org/tasks.org" "Tasks")
           "* TODO %^{Task}  %^G\n   %?\n  %a"))
    (add-to-list 'org-capture-templates
        '("n" "Notes" entry (file+headline "~/org/notes.org" "Notes")
           "* %^{Header}  %^G\n  %u\n\n  %?"))
#+END_SRC

* Batteries
*** Calfw

[[https://github.com/kiwanami/emacs-calfw][Calfw]] program displays a calendar view in the Emacs buffer.

[[file:img/cfw_calendar.png]]
#+BEGIN_SRC emacs-lisp
    (require 'calfw)
    (require 'calfw-org)
#+END_SRC

**** Unicode chars for lines

#+BEGIN_SRC emacs-lisp
;; Unicode characters
(setq cfw:fchar-junction ?‚ïã
      cfw:fchar-vertical-line ?‚îÉ
      cfw:fchar-horizontal-line ?‚îÅ
      cfw:fchar-left-junction ?‚î£
      cfw:fchar-right-junction ?‚î´
      cfw:fchar-top-junction ?‚îØ
      cfw:fchar-top-left-corner ?‚îè
      cfw:fchar-top-right-corner ?‚îì)
#+END_SRC

*** Smex

[[https://github.com/nonsequitur/smex][Smex]] is a M-x enhancement for Emacs. Built on top of IDO, it provides
a convenient interface to your recently and most frequently used
commands. And to all the other commands, too.

| Binding | Call                     | Do                                                           |
|---------+--------------------------+--------------------------------------------------------------|
| M-x     | smex                     | Calls a interactive command using smex                       |
| M-X     | smex-major-mode-commands | Idem as above but limited to the current major mode commands |

#+BEGIN_SRC emacs-lisp
    (require 'smex)
#+END_SRC

**** Set cache file

Smex keeps a file to save its state betweens Emacs sessions.
The default path is =~/.smex-items=

#+BEGIN_SRC emacs-lisp
    (setq smex-save-file "~/.emacs.d/tmp/smex-items")
#+END_SRC

**** Useful bindings & Delayed Initation

#+BEGIN_QUOTE
I install smex with the following code to make emacs startup a little
faster.  This delays initializing smex until it's needed. IMO, smex
should load without this hack.

Just have smex call =smex-initialize= when it's needed instead of
having the user do it. --[[http://www.emacswiki.org/emacs/Smex][LeWang on EmacsWiki]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(global-set-key [(meta x)] (lambda ()
                             (interactive)
                             (or (boundp 'smex-cache)
                                 (smex-initialize))
                             (global-set-key [(meta x)] 'smex)
                             (smex)))

(global-set-key [(shift meta x)] (lambda ()
                                   (interactive)
                                   (or (boundp 'smex-cache)
                                       (smex-initialize))
                                   (global-set-key [(shift meta x)] 'smex-major-mode-commands)
                                   (smex-major-mode-commands)))
#+END_SRC

*** Ido



**** set cache file
#+BEGIN_SRC emacs-lisp
    (setq ido-save-directory-list-file "~/.emacs.d/tmp/ido.last")
#+END_SRC

**** enable Ido
#+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-use-virtual-buffers t)
    (require 'ido)
    (ido-mode t)
    (ido-everywhere t)
#+END_SRC

**** Ido-ubiquitous

Gimme some ido... everywhere!

Does what you expected ido-everywhere to do.

#+BEGIN_SRC emacs-lisp
    (require 'ido-ubiquitous)
    (ido-ubiquitous-mode t)
#+END_SRC

**** Ido-vertical-mode

Makes ido-mode display vertically.

#+BEGIN_SRC emacs-lisp
    (require 'ido-vertical-mode)
    (ido-vertical-mode t)
#+END_SRC

**** Ido for yes or no questions

#+BEGIN_SRC emacs-lisp
    (require 'ido-yes-or-no)
    (ido-yes-or-no-mode t)
#+END_SRC

*** Magit

With [[https://github.com/magit/magit][Magit]], you can inspect and modify your Git repositories with
Emacs. You can review and commit the changes you have made to the
tracked files, for example, and you can browse the history of past
changes. There is support for cherry picking, reverting, merging,
rebasing, and other common Git operations.

#+BEGIN_SRC emacs-lisp
    (require 'magit)
#+END_SRC

*** Browse Kill Ring

#+BEGIN_SRC emacs-lisp
    (require 'browse-kill-ring)
#+END_SRC

*** Async

[[https://github.com/jwiegley/emacs-async][async.el]] is a module for doing asynchronous processing in Emacs.

# #+BEGIN_SRC emacs-lisp
#  (when (tv-require 'dired-aux)
#    (require 'dired-async))
# #+END_SRC

*** TODO Charmap

[[https://github.com/lateau/charmap][Charmap]] is unicode table viewer for Emacs. With CharMap you can see
the unicode table based on The Unicode Standard 6.2.

#+BEGIN_SRC emacs-lisp
    (load-library "charmap")
    (setq charmap-text-scale-adjust 2)
#+END_SRC

*** Swoop



#+BEGIN_SRC emacs-lisp
    (require 'swoop)
    (setq swoop-font-size-change: nil)
#+END_SRC

*** Multi Term

#+BEGIN_SRC emacs-lisp
    (require 'multi-term)
    (setq multi-term-program "/bin/bash")
#+END_SRC

*** Load theme buffer local

#+BEGIN_SRC emacs-lisp
    (require 'load-theme-buffer-local)
#+END_SRC

*** Yasnippet

[[https://github.com/capitaomorte/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates.

#+BEGIN_SRC emacs-lisp
    (require 'yasnippet)
    (yas-global-mode)
#+END_SRC

**** Disable it in ansi-term

#+BEGIN_SRC emacs-lisp
    (add-hook 'after-change-major-mode-hook
          (lambda ()
            (when (find major-mode
                '(term-mode ansi-term))
              (yas-minor-mode 0))))
#+END_SRC

*** Ag

A simple ag frontend, loosely based on ack-and-half.el.

#+BEGIN_SRC emacs-lisp
    (require 'ag)
    (setq ag-reuse-buffers 't)
    (setq ag-highlight-search t)
    (setq ag-arguments
        (list "--color" "--smart-case" "--nogroup" "--column" "--all-types" "--"))
#+END_SRC

*** Paradox

[[https://github.com/Bruce-Connor/paradox][Paradox]] is a Project for modernizing Emacs' Package Menu. With package
ratings, usage statistics, customizability, and more.

*** Diff-hl

[[https://github.com/dgutov/diff-hl][diff-hl]] highlights uncommitted changes on the left side of the
window, allows you to jump between and revert them selectively.

#+begin_src emacs-lisp
    (require 'diff-hl)
    (add-hook 'org-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+end_src

*** Jedi

[[https://github.com/tkf/emacs-jedi][Jedi]] offers very nice auto completion for python-mode.

#+BEGIN_src emacs-lisp
    (require 'jedi)
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (add-hook 'python-mode-hook 'jedi:ac-setup)
#+END_src

*** TODO password-store

[[http://www.zx2c4.com/projects/password-store/][Password store (pass)]] support for Emacs.

- [ ] make my own modifications

*** TODO Popwin

[[https://github.com/m2ym/popwin-el][Popwin]] is a popup window manager for Emacs which makes you free from
the hell of annoying buffers such like *Help*, *Completions*,
*compilation*, and etc.

+ [ ] Test integration with w3m

#+BEGIN_SRC emacs-lisp
    (require 'popwin)
    (popwin-mode 1)
;    (require 'popwin-w3m)
;    (setq browse-url-browser-function 'popwin:w3m-browse-url)
#+END_SRC

*** TODO mu4e

[[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] is an emacs-based e-mail client which uses mu as its back-end

Through mu, mu4e sits on top of your Maildir (which you update with
e.g. offlineimap or fetchmail). mu4e is designed to enable
super-efficient handling of e-mail; searching, reading, replying,
moving, deleting. The overall 'feel' is a bit of a mix of dired and
Wanderlust.

Features include:

 *  Fully search-based: there are no folders, only queries
 *  Fully documented, with example configurations
 *  User-interface optimized for speed, with quick key strokes for common actions
 *  Support for non-English languages (so "angstrom" will match "√Öngstr√∂m")
 *  Asynchronous; heavy actions don't block emacs3
 *  Support for crypto
 *  Writing rich-text e-mails using org-mode
 *  Address auto-completion based on the contacts in your messages - no need for managing address books
 *  Extendable with your own snippets of elisp

**** TODO How it works

There is an actual scheme of the current configuration (rendered by =graphviz=)

#+BEGIN_SRC dot :file img/mu4e_scheme.png :cmdline -Kdot -Tpng :tangle no
  digraph G {
      // General properties
      size="6,5"
      dpi=300
      ratio=auto
      rankdir="LR"
      compound=true
      labelloc=t
      fontname="Ubuntu Bold"
      fontsize=48
      label="Emacs & mu4e email config"

      // NODES
      node [fontname="Ubuntu Bold"]

      subgraph cluster_mailservers {
          label="Mail Servers"
          color=goldenrod4
          style=dashed
          penwidth=3
          margin=30
          fontsize=20
          node [penwidth=2, margin=0.2]
          imap [shape=house, color=blue, label="IMAP\naccount"]
          pop3 [shape=egg, color=chartreus, label="POP3\naccounts"]
      }

      {
          rank=same
          node [penwidth=2, style=filled, margin=0.2]
          notifications [
              color=gold4
              fillcolor=yellow
              shape=note
              margin=0.3
              label="notifications"
          ]
          subgraph {
              label=""
              node [penwidth=2, style=filled, margin=0.2]
              getmail [fillcolor=beige]
              procmail [fillcolor=beige]
              postfix [fillcolor=beige]
              cleanup_maildir [label="cleanup-maildir", fillcolor=moccasin]
          }
      }

      subgraph cluster_maildirs {
          label=""
          color=invis
          fontsize=18
          margin=20
          subgraph cluster_maili {
              label=" Maildir IMAP "
              color=blue
              fixedsize=true
              rank=same
              style=rounded
              penwidth=2
              node [shape=folder, color=blue, width=1.4, fontcolor=dimgrey]
              inbox [label="Inbox"]
              outbox [label="Outbox"]
          }

          subgraph cluster_mailp {
              label=" Maildir Pop3 "
              color=darkgreen
              penwidth=2
              style=rounded
              node [
                  shape=folder
                  color=darkgreen
                  width=1.4
                  height=0.4
                  fontcolor=dimgrey
              ]
              Archive [label="Archive"]
              business [label="business"]
              code [label="code"]
              Drafts [label="Drafts"]
              education [label="education"]
              Inbox [label="Inbox"]
              joedicastro [label="joedicastro"]
              lists [label="lists"]
              Local [label="Local"]
              motley [label="motley"]
              publicity [label="publicity"]
              Sent [label="Sent"]
              Spam [label="Spam"]
              Trash [label="Trash"]
            work [label="work"]
          }
      }

     subgraph cluster_emacsauth {
          color=invis
          label=""
          subgraph cluster_emacs {
              label="Emacs"
              color=darkgreen
              fontsize=28
              fontcolor=darkgreen
              fillcolor=darkseagreen1
              style="filled, rounded"
              penwidth=3
              margin=60
              rank=same
              node [style=filled, shape=square, fontcolor=white]
              mu4e [fillcolor=purple, fontsize=30, margin=0.6, peripheries=2]
              maildirs [fillcolor=maroon, margin=0.2, peripheries=2]
              epa [fillcolor=green2, margin=0.5, fontcolor=black, label="EasyPG"]
              dired [fillcolor=aquamarine, margin=0.5, fontcolor=black]
              flyspell [fillcolor=green2, margin=0.3, fontcolor=black]
              org [fillcolor=seagreen, margin=0.7, label="org"]
              contacts [fillcolor=olivedrab, label="org-contacts"]
              smtp [
                  label="SmtpMail"
                  fillcolor=olivedrab1
                  fontcolor=black
                  margin=0.3
              ]
              gnus [
                  color=darkblue
                  fillcolor=palegreen1
                  label="Gnus\n message-mode"
                  margin=0.3
                  fontcolor=black
              ]
          }
          {
              rank=sink
              node [penwidth=2, margin=0.2]
              authinfo [
                  shape=signature
                  label="authinfo.gpg"
                  fontcolor=gold4
              ]
              mail_gpg [
                  shape=signature
                  label="mail.el.gpg"
                  fontcolor=gold4
             ]
             gpg_agent [
                  fillcolor=lightskyblue
                  style=filled
                  label="gpg-agent"
             ]
          }
      }

      node [fillcolor=beige, style=filled, penwidth=2]

      localhost [shape=plaintext, fillcolor=grey, margin=0.2]
      mu [margin=0.15, shape=doublecircle, fontsize=18]

      // EDGES
      edge [fontname="Ubuntu", fontsize=18, penwidth=2]

      imap -> getmail [color=blue, label="retrieve email regularly", dir=both]
      pop3 -> getmail [color=darkgreen]

      getmail -> procmail [color=darkgreen, label="process mail"]
      procmail -> notifications [
          color=gold4
          label="via notify-send"
          style=dashed
          constraint=none
          minlen=3
      ]

      inbox -> mu [
          ltail=cluster_maili
          penwidth=3
          color=blue
          style=dashed
          dir=back
          label="index"
      ]
      Inbox -> mu [
          ltail=cluster_mailp
          penwidth=3
          color=darkgreen
          style=dashed
          dir=back
          label="index"
      ]

      getmail -> inbox  [
          color=blue
          dir=both
          lhead=cluster_maili
          label="update"
      ]

      localhost -> postfix [color=gold4]
      postfix -> Local [color=gold4, taillabel="store"]
      procmail -> code [color=darkgreen]
      procmail -> education [color=darkgreen]
      procmail -> Inbox [color=darkgreen, penwidth=3, label="store"]
      procmail -> lists [color=darkgreen]
      procmail -> publicity [color=darkgreen]
      procmail -> Spam [color=darkgreen]

      edge [fontname="Ubuntu", fontsize=18, penwidth=2]
      lists    -> cleanup_maildir [color=crimson]
      Trash    -> cleanup_maildir [color=crimson]
      publicity-> cleanup_maildir [color=crimson, label="delete"]
      Local    -> cleanup_maildir [color=crimson]
      Spam     -> cleanup_maildir [color=crimson]

      edge [fontname="Ubuntu", fontsize=18, penwidth=2]
      mu4e -> gnus [label="compose, reply & forward", color=darkgreen]
      contacts -> gnus [label="auto-complete\n contacts", style=dotted]
      flyspell -> gnus [style=dotted, label="spell check"]
      gnus -> smtp [label="send", color=darkgreen]
      gnus -> epa [style=dashed, label="sign & encrypt", dir=both]
      epa -> gpg_agent [
          label="sign & encrypt"
          color=darkgreen
          style=dashed
          dir=both
      ]

      gpg_agent -> epa [
          label="decrypt & verify"
          color=darkgreen
          style=dashed
      ]
      epa -> mu4e [style=dashed, label="decrypt & verify"]
      org -> gnus [
          label="compose\n rich-text messages"
          dir=both
          style=dotted
      ]

      dired -> gnus [label="attach & compose", style=dotted]
      smtp -> pop3 [label="send", color=darkgreen]
      smtp -> Sent [label="store", color=darkgreen]
      smtp -> imap [label="send", color=blue]

      mu -> mu4e [
          color=purple
          penwidth=3
          style=dashed
          label="search & view"
          fontcolor=purple
          fontsize=18
          fontname="Ubuntu Bold"
      ]
      maildirs -> mu4e [style=dotted, label="summarize"]

      edge [style=dashed]
      authinfo -> epa [label="server config"]
      epa -> smtp [label="read server config"]
      authinfo -> gpg_agent [dir=back, label="decrypt", minlen=2.0]
      mail_gpg -> gpg_agent [dir=back, label="decrypt", minlen=3.0]
      mail_gpg -> mu4e [label="read user's info"]
  }
#+END_SRC

#+RESULTS:
[[file:img/mu4e_scheme.png]]

The complete process works like this:

+ The email is fetched each ~x~ minutes (via cron) by [[http://pyropus.ca/software/getmail/][getmail]]. The mail is fetched from an IMAP account and several POP3 accounts.
+ At the same time the local email (in =localhost=) is fetched by [[http://www.postfix.org/][postfix]] and stored directly in the =Local= folder of the POP3's Maildir.
+ The email that comes from the IMAP account via =getmail= is stored directly in a Maildir directory. In that case I only care about Inbox and Outbox (sent) folders.
+ The email that comes from the several POP3 accounts is processed by [[http://www.procmail.org/][procmail]].
  Various rules filter the emails and stores them in their own sub-directory in the POP3's Maildir.
  The SPAM messages are already checked by my account servers, so I only use the SPAM fields already present to filter them.
  So, is as simple as that:

    #+BEGIN_EXAMPLE
        ## SPAM

        :0:
        * ^X-Spam-Status: Yes
        Spam/

        :0:
        * ^X-Spam-Flag: YES
        Spam/

        :0:
        * ^X-Spam-Level: \*\*\*\*\*
        Spam/
    #+END_EXAMPLE

  I use a =procmail= rule to send ~notifications~ to the desktop via =notify-sed=. I'm using it for all of them and is like this:

    #+BEGIN_EXAMPLE
        ## Notification

        :0 ic:
        * ^Subject:.*\/.*
        | echo $MATCH \
        | python2 -c "import email,sys; print email.Header.decode_header(sys.stdin.read())[0][0]" \
        | while read OUTPUT;do notify-send -a 'Tienes un correo nuevo: ' "$OUTPUT";done
    #+END_EXAMPLE

+ Daily, a script, [[https://github.com/joedicastro/cleanup-maildir][cleanup-maildir]], deletes all mails older than 14 days from several folders in the POP3's Maildir.
+ Each two minutes, Emacs orders to [[http://www.djcbsoftware.nl/code/mu/][mu]] to index all emails in both Maildirs. *Mu* is the main key of all the configuration.
+ Into Emacs [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] allows us to search & view email. Also we can Reply, Forward an Compose new emails.
  The sensitive user's info is stored in an encrypted file =mail.el.gpg= managed by [[http://epg.sourceforge.jp/][EasyPG (aka EPA)]] and =gpg-agent= (from [[https://www.gnupg.org/][GnuPG]]).
  Also =EasyPG= is used to decrypt encrypted emails and verify signatures in mu4e's View mode.
+ The extension ~maildirs~ is used to summarize the Maildir folders and see how many mails read/unread are in each folder.
+ When a email is composed =mu4e= uses Gnus' message mode to do the task. I use =flyspell-mode= to do a spell check into the message.
  The email address (in fields like To:, Cc:, ...) can be auto-completed using the addresses stored in the emails sent to us and at the same time from the contacts stored in [[https://julien.danjou.info/projects/emacs-packages#org-contacts][org-contacts]]
  [[http://orgmode.org/][Org]] can be used to compose rich-text emails (HTML) easily.
  The emails can be signed & encypted using =EasyPG=.
+ We can attach a file a compose a new email with it directly from [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]]
+ Emacs' =SmtpMail= is used to send emails to the servers. The configuration of the servers is stored in an encrypted file =authinfo.gpg=.
  The emails sent to a POP3 account are stored in the POP3's Maildir Sent folder, the ones sent to the IMAP account are no stored.
  The email can be sent immediately or queued (useful for offline situations). All the queued email is sent at the same time when this feature is turned off.
+ In View mode & Edit mode, if emoticons are present in the message's body, they are rendered as an image.

**** TODO ToDo List [81%]

+ [X] Enqueue messages
+ [X] Send messages asynchronously
+ [X] Add contact from mail
+ [X] Send local mails to Maildir (made via postfix)
+ [X] Spam management (via procmail)
+ [X] Notifications (via procmail)
+ [X] Rules/filters (via procmail)
+ [X] Fix signature
+ [X] Multiple identities
+ [X] Return Receipt (Disposition-Notification-To:)?
+ [X] Fix Edit Draft messages
+ [X] Attachment remember?
+ [X] View Emoticons?
+ [X] Three attempts when failed the passphrase (use gpg-agent)
+ [X] Encrypt/Decrypt messages and & signing
+ [X] Autoarchive/delete mails periodically (cleanup-maildir)
+ [X] Configuration scheme
+ [X] +Vim Keybindings?+ Discarded: I'm used to the defaults now
+ [ ] complete the emoticons to cover more
+ [ ] HTML messages
+ [ ] Reply only to the list (List-ID)
+ [ ] +View Gravatars?+ Discarded: I didn't find a non-dirty solution to insert them in the header

**** Enable mu4e

#+BEGIN_SRC emacs-lisp
    (require 'mu4e)
#+END_SRC

**** Current keybindings
***** Main view

[[file:img/mu4e_main.png]]

| Binding | Call                                 | Do                                                  |
|---------+--------------------------------------+-----------------------------------------------------|
| j       | mu4e-headers-jump-to-maildir         | jump to some maildir (followed by a letter or =/=)  |
| b       | mu4e-headers-search-bookmark         | run a bookmark (saved query) (followed by a letter) |
| B       | mu4e-headers-search-bookmark-edit    | run & edit a bookmark                               |
| s       | mu4e-headers-search                  | run a search query                                  |
| C       | mu4e-compose-new                     | compose a news message                              |
| u       | mu4e-maildirs-extension-force-update | update the cache & index of maildirs extension      |
| U       | mu4e-update-mail-and-index           | update email & database                             |
| m       | mu4e-main-toggle-mail-sending-mode   | toggles between sending mail directly & queuing it  |
| f       | smtpmail-send-queued-mail            | send queued mail                                    |
| H       | mu4e-display-manual                  | show the mu4e help about the main view              |
| A       | mu4e-about                           | show the mu4e about buffer                          |
| q       | mu4e-quit                            | exit mu4e                                           |
| $       | mu4e-show-log                        | show the log (with logging enabled)                 |
| ?       | describe-mode                        | describe the mode                                   |

***** Headers view

[[file:img/mu4e_headers.png]]

| Binding     | Call                                | Do                                            |
|-------------+-------------------------------------+-----------------------------------------------|
| n           | mu4e-headers-next                   | go to next message                            |
| p           | mu4e-headers-prev                   | go to previous message                        |
| y           | mu4e-select-other-view              | select the message view (if it's visible)     |
| RET         | mu4e-headers-view-message           | open the message at point in the message view |
| s           | mu4e-headers-search                 | search                                        |
| S           | mu4e-headers-search-edit            | edit last query                               |
| /           | mu4e-headers-search-narrow          | narrow the search                             |
| b           | mu4e-headers-search-bookmark        | search bookmark                               |
| B           | mu4e-headers-search-bookmark-edit   | edit bookmark before search                   |
| g           | mu4e-headers-rerun-search           | re-run previous search                        |
| j           | mu4e-headers-jump-to-maildir        | jump to maildir                               |
| \           | mu4e-headers-query-prev             | previous query                                |
| M-left      | mu4e-headers-query-prev             | previous query                                |
| M-right     | mu4e-headers-query-next             | next query                                    |
| O           | mu4e-headers-change-sorting         | change sort order                             |
| P           | mu4e-headers-toggle-threading       | toggle threading                              |
| Q           | mu4e-headers-toggle-full-search     | toggle full-search                            |
| V           | mu4e-headers-toggle-skip-duplicates | toggle skip-duplicates                        |
| W           | mu4e-headers-toggle-include-related | toggle include-related                        |
| d           | mu4e-headers-mark-for-trash         | mark for moving to the trash folder           |
| <backspace> | mu4e-headers-mark-for-trash         | mark for moving to the trash folder           |
| DEL         | mu4e-headers-mark-for-delete        | mark for complete deletion                    |
| D           | mu4e-headers-mark-for-delete        | mark for complete deletion                    |
| m           | mu4e-headers-mark-for-move          | mark for moving to another maildir folder     |
| r           | mu4e-headers-makr-for-refile        | mark for refiling                             |
| +           | mu4e-headers-mark-for-flag          | mark for flagging                             |
| -           | mu4e-headers-mark-for-unflag        | mark for unflagging                           |
| !           | mu4e-headers-mark-for-read          | mark message as read                          |
| ?           | mu4e-headers-mark-for-unread        | mark message as unread                        |
| u           | mu4e-headers-mark-unmark            | unmark message at point                       |
| U           | mu4e-headers-mark-unmark-all        | unmark *all* messages                         |
| %           | mu4e-headers-mark-pattern           | mark based on a regular expression            |
| &           | mu4e-headers-mark-custom            | mark based on a custom user-provided function |
| T           | mu4e-headers-mark-thread            | mark whole thread                             |
| t           | mu4e-headers-mark-subthread         | mark whole subthread                          |
| <insert>    | mu4e-headers-mark-for-something     | mark for 'something' (decide later)           |
| #           | mu4e-mark-resolve-deferred-marks    | resolve deferred 'something' marks            |
| x           | mu4e-mark-execute-all               | execute actions for the marked messages       |
| A           | mu4e-headers-action                 | execute some custom action on a header        |
| R           | mu4e-compose-reply                  | reply                                         |
| F           | mu4e-compose-forward                | forward                                       |
| C           | mu4e-compose-new                    | compose                                       |
| E           | mu4e-compose-edit                   | edit (only allowed for draft messages)        |
| C-+         | mu4e-headers-split-view-grow        | increase the number of headers shown          |
| C--         | mu4e-headers-split-view-shrink      | decrease the number of headers shown          |
| H           | mu4e-display-manual                 | get help                                      |
| h           | describe-mode                       | describe the current mode                     |
| C-S-u       | mu4e-update-mail-and-index          | update mail & reindex                         |
| q           | mu4e-headers-quit-buffer            | leave the headers buffer                      |
| z           | mu4e-headers-quit-buffer            | leave the headers buffer                      |
| $           | mu4e-show-log                       | show the log (if enabled)                     |

***** Message view

[[file:img/mu4e_mail.png]]
| Binding     | Call                                | Do                                               |
|-------------+-------------------------------------+--------------------------------------------------|
| n           | mu4e-view-headers-next              | go to next message                               |
| p           | mu4e-view-headers-prev              | go to previous message                           |
| y           | mu4e-select-other-view              | select the message view (if it's visible)        |
| RET         | mu4e-scroll-up                      | scroll down                                      |
| SPC         | mu4e-view-scroll-up-or-next         | scroll down, if at end, move to next message     |
| s           | mu4e-headers-search                 | search                                           |
| S           | mu4e-view-search-edit               | edit last query                                  |
| /           | mu4e-view-search-narrow             | narrow the search                                |
| O           | mu4e-headers-change-sorting         | change sort order                                |
| P           | mu4e-headers-toggle-threading       | toggle threading                                 |
| Q           | mu4e-headers-toggle-full-search     | toggle full-search                               |
| W           | mu4e-headers-toggle-include-related | toggle include-related                           |
| b           | mu4e-headers-search-bookmark        | search bookmark                                  |
| B           | mu4e-headers-search-bookmark-edit   | edit bookmark before search                      |
| j           | mu4e-headers-jump-to-maildir        | jump to maildir                                  |
| M-left      | mu4e-headers-query-prev             | previous query                                   |
| M-right     | mu4e-headers-query-next             | next query                                       |
| d           | mu4e-view-mark-for-trash            | mark for moving to the trash folder              |
| <backspace> | mu4e-view-mark-for-trash            | mark for moving to the trash folder              |
| D           | mu4e-view-mark-for-delete           | mark for complete deletion                       |
| DEL         | mu4e-view-mark-for-delete           | mark for complete deletion                       |
| m           | mu4e-view-mark-for-move             | mark for moving to another maildir folder        |
| r           | mu4e-view-mark-for-refile           | mark for refiling                                |
| +           | mu4e-view-mark-for-flag             | mark for flagging                                |
| -           | mu4e-view-mark-for-unflag           | mark for unflagging                              |
| u           | mu4e-view-unmark                    | unmark message at point                          |
| U           | mu4e-view-unmark-all                | unmark *all* messages                            |
| %           | mu4e-view-mark-pattern              | mark based on a regular expression               |
| &           | mu4e-view-mark-custom               | mark based on a custom user-provided function    |
| T           | mu4e-view-mark-thread               | mark whole thread                                |
| t           | mu4e-view-mark-subthread            | mark whole subthread                             |
| <insert>    | mu4e-view-mark-for-something        | mark for 'something' (decide later)              |
| #           | mu4e-mark-resolve-deferred-marks    | resolve deferred 'something' marks               |
| x           | mu4e-view-marked-execute            | execute actions for the marked messages          |
| \vert       | mu4e-view-pipe                      | pipe message through shell command               |
| R           | mu4e-compose-reply                  | reply                                            |
| F           | mu4e-compose-forward                | forward                                          |
| C           | mu4e-compose-new                    | compose                                          |
| E           | mu4e-compose-edit                   | edit (only allowed for draft messages)           |
| g           | mu4e-view-go-to-url                 | go to (visit) numbered URL (using =browse-url=)  |
| e           | mu4e-view-save-attachment           | extract (save) attachment (asks for number)      |
| C-u e       | mu4e-view-save-attachment           | extracts multiple attachments                    |
| o           | mu4e-view-open-attachment           | open attachment (asks for number)                |
| a           | mu4e-view-action                    | execute some custom action on the message        |
|-------------+-------------------------------------+--------------------------------------------------|
| a b         |                                     | browse mail                                      |
| a c         |                                     | capture message                                  |
| a o         |                                     | add contact to org-contact                       |
| a r         |                                     | retag email                                      |
| a v         |                                     | view message as pdf                              |
| a x         |                                     | search messages from the same sender             |
|-------------+-------------------------------------+--------------------------------------------------|
| A           |                                     | execute some custom action on an attachment      |
|-------------+-------------------------------------+--------------------------------------------------|
| A \vert     |                                     | pipe attachment through shell command            |
| A e         |                                     | open the attachment in emacs                     |
| A w         |                                     | open the attachment with an external application |
|-------------+-------------------------------------+--------------------------------------------------|
| w           | visual-line-mode                    | toggle line wrapping                             |
| h           | mu4e-view-toggle-hide-cited         | toggle showing cited parts                       |
| v           | mu4e-view-verify-msg-popup          | show details about the cryptographic signature   |
| C-c RET v   | mml-validate                        | validate the email                               |
| .           | mu4e-view-raw-message               | show the raw message view. =q= takes you back.   |
| C-+         | mu4e-headers-split-view-grow        | increase the number of headers shown             |
| C--         | mu4e-headers-split-view-shrink      | decrease the number of headers shown             |
| H           | mu4e-display-manual                 | get help                                         |
| C-S-u       | mu4e-update-mail-and-index          | update mail & reindex                            |
| q           | mu4e-view-quit-buffer               | leave the message view                           |
| z           | mu4e-view-quit-buffer               | leave the message view                           |
| $           | mu4e-show-log                       | show the log (if enabled)                        |
| ?           | describe-mode                       | describe the current mode                        |

***** Editor view

[[file:img/mu4e_editor.png]]

| Binding         | Call                                           | Do                                                          |
|-----------------+------------------------------------------------+-------------------------------------------------------------|
| C-c C-c         | message-send-and-exit                          | send message and quit the buffer                            |
| C-c C-s         | message-send                                   | send the message                                            |
| C-c C-d         | message-dont-send                              | save to drafts and leave                                    |
| C-c C-k         | message-kill-buffer                            | kill the message                                            |
| C-c C-a         | mml-attach-file                                | attach a file (pro-tip: drag & drop works as well)          |
| C-c RET f       | mml-attach-file                                | attach a file                                               |
| C-c RET b       | mml-attach-buffer                              | attach a buffer                                             |
|-----------------+------------------------------------------------+-------------------------------------------------------------|
| TAB             | message-tab                                    | auto-complete email address                                 |
| C-c C-f C-o     | message-goto-from                              | move to the *From:* header                                  |
| C-c C-f C-t     | message-goto-to                                | insert/move to the *To:* header                             |
| C-c C-f C-c     | message-goto-cc                                | insert/move to the *Cc:* header                             |
| C-c C-f C-b     | message-goto-bcc                               | insert/move to the *Bcc:* header                            |
| C-c C-f C-w     | message-goto-fcc                               | insert/move to the *Fcc:* header                            |
| C-c C-f C-s     | message-goto-subject                           | insert/move to the *Subject:* header                        |
| C-c C-f C-f     | message-goto-followup-to                       | insert/move to the *Followup-To:* header                    |
| C-c C-f C-r     | message-goto-reply-to                          | insert/move to the *Reply-To:* header                       |
| C-c C-f C-k     | message-goto-keywords                          | insert/move to the *Keywords:* header                       |
| C-c C-f C-u     | message-goto-summary                           | insert/move to the *Summary:* header                        |
| C-c C-u         | message-insert-or-toggle-importance            | insert or toggle *Importance:* header                       |
| C-c C-f TAB     | message-insert-or-toggle-importance            | insert or toggle *Importance:* header                       |
| C-c M-n         | message-insert-disposition-notification-to     | insert *Disposition-Notification-To:* (request receipt)     |
| C-c C-f C-a     | message-generate-unsubscribed-mail-followup-to | insert a *Mail-Followup-To:* header                         |
| C-c C-f RET     | message-goto-mail-followup-to                  | move to the *Mail-Followup-To:* header                      |
| C-c C-f t       | message-reduce-to-to-cc                        |                                                             |
| C-c C-w         | message-insert-signature                       | insert a signature                                          |
| C-c C-o         | message-sort-headers                           | sort the message headers                                    |
|-----------------+------------------------------------------------+-------------------------------------------------------------|
| C-c C-b         | message-goto-body                              | move to the beginning of the message's body                 |
| C-c TAB         | message-goto-signature                         | move to the signature                                       |
|-----------------+------------------------------------------------+-------------------------------------------------------------|
| C-c C-M-y       | message-yank-buffer                            | insert a buffer into the message and quote it               |
| C-c M-f         | message-mark-insert-file                       | insert file at point, marking it with enclosing tags.       |
| C-c M-m         | message-mark-inserted-region                   | mark some region in the current article with enclosing tags |
| C-c C-e         | message-elide-region                           | replace a region with an ellipsis =[...]=                   |
| M-RET           | message-newline-and-reformat                   | insert a newline & reformat quoted text                     |
| C-c C-q         | message-fill-yanked-message                    | fill the body (and signature)                               |
| C-c C-z         | message-kill-to-signature                      | kill all the text up the signature                          |
| C-c C-v         | message-delete-not-region                      | delete all the rest of the body out of the current region   |
| C-c C-r         | message-caesar-buffer-body                     | apply the Caesar cipher to the body (and signature)         |
|-----------------+------------------------------------------------+-------------------------------------------------------------|
| C-c RET C-c     | mml-secure-message-encrypt                     | encrypt the entire message                                  |
| C-c RET C-e     | mml-secure-message-sign-encrypt                | encrypt & sign the entire message                           |
| C-c RET C-s     | mml-secure-message-sign                        | sign the entire message                                     |
| C-c RET C-n     | mml-unsecure-message                           | remove secure features                                      |
| C-c RET v       | mml-validate                                   | validate the email                                          |
|-----------------+------------------------------------------------+-------------------------------------------------------------|
| C-S-u           | mu4e-update-mail-and-index                     | update mail & reindex                                       |
| C-c ?           | describe-mode                                  | describe the current mode                                   |

**** Use encryption

Use encryption to protect the sensitive data like the servers configuration
(stored in =authinfo.gpg=) and the sensitive user's infomation.

#+BEGIN_SRC emacs-lisp
    (require 'epa-file)
    (epa-file-enable)
    (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
#+END_SRC

**** User information

Sets the default user's information properly.

#+BEGIN_SRC emacs-lisp
    (setq user-full-name "joe di castro"
          user-mail-address "joe@joedicastro.com")
#+END_SRC

**** SMTP configuration

This is the default smtp configuration to use with a default account
and allowing to choose between another multiple additional accounts
too.

***** First load the user's sensitive information

This load the =mail.el.gpg= file where I store the email information
that I prefer to keep private (since I share this config in GitHub) to
inquisitive eyes.

#+BEGIN_SRC emacs-lisp
    (add-hook 'mu4e-main-mode-hook (lambda ()
        (load-library (concat user-emacs-directory "mail.el.gpg"))))
#+END_SRC

Even when I keep this information private, I still going to share with
you the current code stored in that file with make up data.

#+BEGIN_EXAMPLE emacs-lisp
    ;; a list of current and past email accounts to display correctly
    ;; the From/To field in view mode with sent emails.
    (setq mu4e-user-mail-address-list (list "default_account@example.com"
                                            "another_account@sample.com"
                                            "another_one@fake.com"
                                            "past_account@example.com" ))

    ;; the smtp configuration for the default account
    (setq message-send-mail-function   'smtpmail-send-it
           smtpmail-default-smtp-server "smtp.example.com"
           smtpmail-smtp-server "smtp.example.com"
           smtpmail-local-domain "example.com"
           smtpmail-stmp-user "default_user"
           smtpmail-stream-type 'starttls
           smtpmail-smtp-service 587
           mu4e-sent-messages-behavior 'sent
           message-signature
                (concat "joe di castro\n"
                        "http://joedicastro.com\n"))

    ;; a list of stmp configurations for each additional account
    (defvar my-mu4e-account-alist
       '(
         ;; a pop3 account
         ("other"
          (user-mail-address "another_account@sample.com")
          (user-full-name "joey")
          (smtpmail-default-smtp-server "smtp.sample.com")
          (smtpmail-smtp-server "smtp.sample.com")
          (smtpmail-stmp-user "joey")
          (smtpmail-local-domain "sample.com")
          (smtpmail-stream-type starttls)
          (smtpmail-smtp-service 587)
          (mu4e-sent-messages-behavior 'sent)
          (message-signature
                (concat "Joey\n"
                        "It‚Äôs a moo point. "
                        "It‚Äôs like a cow‚Äôs opinion; it doesn‚Äôt matter. "
                        "It‚Äôs moo.")))
         ;; an imap account
         ("another_one"
          (user-mail-address "another_one@fake.com")
          (user-full-name "John Doe")
          (smtpmail-default-smtp-server "mail.fake.com")
          (smtpmail-smtp-server "mail.fake.com")
          (smtpmail-stmp-user "john$doe")
          (smtpmail-local-domain "fake.com")
          (smtpmail-stream-type starttls)
          (smtpmail-smtp-service 587)
          (mu4e-sent-messages-behavior 'delete)
          (message-signature "John Doe"))
    ))
#+END_EXAMPLE

***** The rest of the SMTP configuration

This is the config needed to choose the right smtp configuration for
the proper account in each moment (for new messages, replies, forwards
& drafts editing).

#+BEGIN_SRC emacs-lisp
    ;; set a stronger TLS configuration than the default to avoid nasty
    ;; warnings and for a little more secure configuration
    (setq gnutls-min-prime-bits 2048)

    ;; the multiple functions that provide the multiple accounts selection functionality
    (defun joe/mu4e-choose-account ()
        (completing-read (format "Compose with account: (%s) "
          (mapconcat #'(lambda (var) (car var)) my-mu4e-account-alist "/"))
              (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                                  nil t nil nil (caar my-mu4e-account-alist)))

    (defun joe/mu4e-get-field (a)
        (let ((field (cdar (mu4e-message-field mu4e-compose-parent-message a))))
            (string-match "@\\(.*\\)\\..*" field)
            (match-string 1 field)))


    (defun joe/mu4e-is-not-draft ()
        (let ((maildir (mu4e-message-field (mu4e-message-at-point) :maildir)))
           (if (string-match "drafts*" maildir)
                  nil
                  t)))

    (defun joe/mu4e-set-account ()
      "Set the account for composing a message."
      (let* ((account
              (if mu4e-compose-parent-message
                (let ((field (if (joe/mu4e-is-not-draft)
                                (joe/mu4e-get-field :to)
                                (joe/mu4e-get-field :from))))
                    (if (assoc field my-mu4e-account-alist)
                        field
                        (joe/mu4e-choose-account)))
                (joe/mu4e-choose-account)))
             (account-vars (cdr (assoc account my-mu4e-account-alist))))
        (if account-vars
            (mapc #'(lambda (var)
                      (set (car var) (cadr var)))
                  account-vars)
          (error "No email account found"))))

    (add-hook 'mu4e-compose-pre-hook 'joe/mu4e-set-account)
#+END_SRC

**** Queuing emails

When offline or when you want do delay a message, you can go to the
queuing mode and send them all turning it off.

#+BEGIN_SRC emacs-lisp
    ;; Allow queuing mails
    (setq smtpmail-queue-mail nil ;; start in non-queuing mode
        smtpmail-queue-dir "~/org/mail/mails/Queue")
#+END_SRC

**** Signature

Add the signature by default when a new email is composed.

#+BEGIN_SRC emacs-lisp
    (setq mu4e-compose-signature-auto-include t)
    (setq
            message-signature t
            mu4e-compose-signature t)
#+END_SRC

**** Sending emails asynchronous

This is useful to send emails with attachments and do not block emacs
until end the transmission.

#+BEGIN_SRC emacs-lisp
    (require 'smtpmail-async)
    (setq
        send-mail-function 'async-smtpmail-send-it
        message-send-mail-function 'async-smtpmail-send-it)
#+END_SRC

**** maildirs extension

[[https://github.com/agpchil/mu4e-maildirs-extension][Mu4e maildirs extension]] adds a maildir summary in mu4e-main-view.

#+BEGIN_SRC emacs-lisp
    (require 'mu4e-maildirs-extension)
    (mu4e-maildirs-extension)
    (setq mu4e-maildirs-extension-maildir-separator "*")
    (setq mu4e-maildirs-extension-submaildir-separator "‚úâ")
    (setq mu4e-maildirs-extension-action-text nil)
#+END_SRC

**** Setup maildir & folders

The default Maildir path and subfolders.

#+BEGIN_SRC emacs-lisp
    (setq
        mu4e-maildir       "~/org/mail"        ;; top-level Maildir
        mu4e-sent-folder   "/mails/Sent"       ;; folder for sent messages
        mu4e-drafts-folder "/mails/Drafts"     ;; unfinished messages
        mu4e-trash-folder  "/mails/Trash"      ;; trashed messages
        mu4e-refile-folder "/mails/Archive")   ;; saved messages

    ;; where store the saved attachments
    (setq mu4e-attachment-dir  "~/descargas")
#+END_SRC

**** General Options

mu4e's general options.

#+BEGIN_SRC emacs-lisp
    ;; use 'fancy' non-ascii characters in various places in mu4e
    (setq mu4e-use-fancy-chars t)

    ;; do not ask for confirmation on exit
    (setq mu4e-confirm-quit  nil)

    ;; set mu4e as the default emacs email client
    (setq mail-user-agent 'mu4e-user-agent)

    ;; decorate mu main view
    (defun joe/mu4e-main-mode-font-lock-rules ()
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "\\[\\([a-zA-Z]\\{1,2\\}\\)\\]" nil t)
          (add-text-properties (match-beginning 1) (match-end 1)
          '(face font-lock-variable-name-face)))))
    (add-hook 'mu4e-main-mode-hook 'joe/mu4e-main-mode-font-lock-rules)

    ;; attempt to automatically retrieve public keys when needed
    (setq mu4e-auto-retrieve-keys t)

    ;; don't reply to myself
    (setq mu4e-compose-dont-reply-to-self t)

    ;; only personal messages get in the address book
    (setq mu4e-compose-complete-only-personal t)

#+END_SRC

**** org-mode integration

Integrate with org-mode

#+BEGIN_SRC emacs-lisp
    (require 'org-mu4e)
    (setq org-mu4e-convert-to-html t)
    (defalias 'org-mail 'org-mu4e-compose-org-mode)
#+END_SRC

**** Updating the email

Update the index every 2 minutes but don't retrieve the email via
Emacs.

#+BEGIN_SRC emacs-lisp
      (setq
        mu4e-get-mail-command "true" ;; or fetchmail, or ...
        mu4e-update-interval 120)    ;; update every 2 minutes
#+END_SRC

**** Header's view config

The headers view configuration.

#+BEGIN_SRC emacs-lisp
    ;; more cool and practical than the default
    (setq mu4e-headers-from-or-to-prefix '("" . "‚ûú "))
    ;; to list a lot of mails, more than the default 500
    ;; is reasonable fast, so why not?
    (setq mu4e-headers-results-limit 750)
    ;; columns to show
    (setq mu4e-headers-fields
        '(
          (:human-date . 9)
          (:flags . 6)
          (:mailing-list . 10)
          (:size . 6)
          (:from-or-to . 22)
          (:subject)))
#+END_SRC

**** Message view config

Config for view mode.

#+BEGIN_SRC emacs-lisp
    ;; visible fields
    (setq mu4e-view-fields
        '(
            :from
            :to
            :cc
            :bcc
            :subject
            :flags
            :date
            :maildir
            :mailing-list
            :tags
            :attachments
            :signature
    ))

    ;; program to convert to pdf
    (setq mu4e-msg2pdf "/usr/bin/msg2pdf")

    ;; view email addresses not only the name
    (setq mu4e-view-show-addresses t)

    ;; attempt to show images when viewing messages
    (setq
       mu4e-view-show-images t
       mu4e-view-image-max-width 800)

    ;; use imagemagick if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
#+END_SRC

**** Editor view config

The editor view configuration.

#+BEGIN_SRC emacs-lisp
    ;; kill the buffer when is no needed any more
    (setq message-kill-buffer-on-exit t)

    ;; set the text width and activate the spell checking
    (add-hook 'mu4e-compose-mode-hook (lambda ()
                                        (set-fill-column 80)
                                        (flyspell-mode)))
#+END_SRC

**** Message view actions

Define actions for message view.

#+BEGIN_SRC emacs-lisp
    ;; add the action to open an HTML message in the browser
    (add-to-list 'mu4e-view-actions
      '("browse mail" . mu4e-action-view-in-browser) t)

    ;; add the action to retag messages
    (add-to-list 'mu4e-view-actions
      '("retag mail" . mu4e-action-retag-message) t)

    ;;Search for messages sent by the sender of the message at point
    (defun joe/search-for-sender (msg)
        (mu4e-headers-search
            (concat "from:" (cdar (mu4e-message-field msg :from)))))

    ;; define 'x' as the shortcut
    (add-to-list 'mu4e-view-actions
        '("xsearch for sender" . joe/search-for-sender) t)

    ;; integration with org-contacts
    (setq mu4e-org-contacts-file "~/org/contacts.org")

    (add-to-list 'mu4e-headers-actions
                 '("org-contact-add" . mu4e-action-add-org-contact) t)
    (add-to-list 'mu4e-view-actions
                 '("org-contact-add" . mu4e-action-add-org-contact) t)


    ;; get a pgp key from a message
    ;; from  http://hugoduncan.org/post/snarf-pgp-keys-in-emacs-mu4e/
    (defun joe/mu4e-view-snarf-pgp-key (&optional msg)
      "get the pgp key for the specified message."
      (interactive)
      (let* ((msg (or msg (mu4e-message-at-point)))
              (path (mu4e-message-field msg :path))
              (cmd (format "%s verify --verbose %s"
                     mu4e-mu-binary
                     (shell-quote-argument path)))
              (output (shell-command-to-string cmd)))
        (let ((case-fold-search nil))
          (when (string-match "key:\\([A-F0-9]+\\)" output)
            (let* ((cmd (format "%s --recv %s"
                                epg-gpg-program (match-string 1 output)))
                   (output (shell-command-to-string cmd)))
              (message output))))))

    (add-to-list 'mu4e-view-actions
                 '("get PGP keys" . joe/mu4e-view-snarf-pgp-key) t)

#+END_SRC

**** Deal with HTML messages

Try to visualize as best as possible the HTML messages in text mode.

#+BEGIN_SRC emacs-lisp
   (setq mu4e-view-prefer-html t)
   (setq mu4e-html2text-command "w3m -dump -cols 110 -T text/html")
#+END_SRC

**** Smileys (emoticons)

Show emoticons when viewing and editing messages.

***** autosmiley.el

[[http://www.emacswiki.org/emacs/autosmiley.el][autosmiley.el]] by Damyan Pepper

#+BEGIN_SRC emacs-lisp
    (require 'smiley)

    (defun autosmiley-overlay-p (overlay)
      "Return whether OVERLAY is an overlay of autosmiley mode."
      (memq (overlay-get overlay 'category)
            '(autosmiley)))

    (defun autosmiley-remove-smileys (beg end)
      (dolist (o (overlays-in beg end))
        (when (autosmiley-overlay-p o)
          (delete-overlay o))))

    (defvar *autosmiley-counter* 0
      "Each smiley needs to have a unique display string otherwise
      adjacent smileys will be merged into a single image.  So we put
      a counter on each one to make them unique")

    (defun autosmiley-add-smiley (beg end image)
      (let ((overlay (make-overlay beg end)))
        (overlay-put overlay 'category 'autosmiley)
        (overlay-put overlay 'display (append image (list :counter (incf *autosmiley-counter*))))))


    (defun autosmiley-add-smileys (beg end)
      (save-excursion
        (dolist (entry smiley-cached-regexp-alist)
          (let ((regexp (car entry))
                (group (nth 1 entry))
                (image (nth 2 entry)))
            (when image
              (goto-char beg)
              (while (re-search-forward regexp end t)
                (autosmiley-add-smiley (match-beginning group) (match-end group) image)))))))


    (defun autosmiley-change (beg end &optional old-len)
      (let ((beg-line (save-excursion (goto-char beg) (line-beginning-position)))
            (end-line (save-excursion (goto-char end) (line-end-position))))
        (autosmiley-remove-smileys beg-line end-line)
        (autosmiley-add-smileys beg-line end-line)))


    ;;;###autoload
    (define-minor-mode autosmiley-mode
      "Minor mode for automatically replacing smileys in text with
    cute little graphical smileys."
      :group 'autosmiley :lighter " :)"
      (save-excursion
        (save-restriction
          (widen)
          (autosmiley-remove-smileys (point-min) (point-max))
          (if autosmiley-mode
              (progn
                (unless smiley-cached-regexp-alist
                  (smiley-update-cache))
                (jit-lock-register 'autosmiley-change))
            (jit-lock-unregister 'autosmiley-change)))))
#+END_SRC

***** Use gnome emoticons

Seen [[https://github.com/ahilsend/dotfiles/blob/3b9756a4f544403b7013bff80245df1b37feecec/.emacs.d/rc/rc-smiley.el][here]]

#+BEGIN_SRC emacs-lisp
    (setq
        smiley-data-directory "/usr/share/icons/gnome/22x22/emotes/"
        smiley-regexp-alist '(("\\(:-?)\\)\\W" 1 "face-smile")
                              ("\\(;-?)\\)\\W" 1 "face-wink")
                              ("\\(:-|\\)\\W" 1 "face-plain")
                              ("\\(:-?/\\)[^/]\\W" 1 "face-uncertain")
                              ("\\(;-?/\\)\\W" 1 "face-smirk")
                              ("\\(:-?(\\)\\W" 1 "face-sad")
                              ("\\(:,-?(\\)\\W" 1 "face-crying")
                              ("\\(:-?D\\)\\W" 1 "face-laugh")
                              ("\\(:-?P\\)\\W" 1 "face-raspberry")
                              ("\\(8-)\\)\\W" 1 "face-cool")
                              ("\\(:-?\\$\\)\\W" 1 "face-embarrassed")
                              ("\\(:-?O\\)\\W" 1 "face-surprise")))
    (add-to-list 'gnus-smiley-file-types "png")
#+END_SRC

***** View emoticons in mu4e

#+BEGIN_SRC emacs-lisp
    ;; Show Smileys
    (add-hook 'mu4e-view-mode-hook 'autosmiley-mode)
    ;; Test smileys:  :-] :-o :-) ;-) :-\ :-| :-d :-P 8-| :-(
#+END_SRC

**** Bookmarks

My bookmarks

#+BEGIN_SRC emacs-lisp
    (add-to-list 'mu4e-bookmarks
                 '("flag:flagged" "Flagged" ?f))
    (add-to-list 'mu4e-bookmarks
                 '("date:48h..now" "Last 2 days" ?l))
    (add-to-list 'mu4e-bookmarks
                 '("date:1h..now" "Last hour" ?h))
    (add-to-list 'mu4e-bookmarks
                 '("flag:attach" "With attachments" ?a) t)
    (add-to-list 'mu4e-bookmarks
                 '("mime:application/pdf" "With documents" ?d) t)
    (add-to-list 'mu4e-bookmarks
                 '("size:3M..500M" "Big messages" ?b) t)
#+END_SRC

**** Shortcuts

My defined shortcuts

#+BEGIN_SRC emacs-lisp
    ;; Folder shortcuts
    (setq mu4e-maildir-shortcuts
      '(
        ("/mails/Archive" . ?a)
        ("/mails/business" . ?b)
        ("/mails/code" . ?c)
        ("/mails/Drafts" . ?d)
        ("/mails/education" . ?e)
        ("/mails/Inbox" . ?i)
        ("/mails/joedicastro" . ?j)
        ("/mails/lists" . ?l)
        ("/mails/Local" . ?h)
        ("/mails/motley" . ?m)
        ("/mails/publicity" . ?p)
        ("/mails/Sent" . ?s)
        ("/mails/Spam" . ?x)
        ("/mails/Trash" . ?t)
        ("/mails/work" . ?w)))
#+END_SRC

**** Dired integration

Integration with Dired, so we can attach a file to a new email
directly from Dired.

| Binding     | Call              | Do                           |
|-------------+-------------------+------------------------------|
| C-c RET C-a | gnus-dired-attach | Attach a file to a new email |

#+BEGIN_SRC emacs-lisp
    (require 'gnus-dired)
    ;; make the `gnus-dired-mail-buffers' function also work on
    ;; message-mode derived modes, such as mu4e-compose-mode
    (defun gnus-dired-mail-buffers ()
      "Return a list of active message buffers."
      (let (buffers)
        (save-current-buffer
          (dolist (buffer (buffer-list t))
            (set-buffer buffer)
            (when (and (derived-mode-p 'message-mode)
                       (null message-sent-message-via))
              (push (buffer-name buffer) buffers))))
        (nreverse buffers)))

    (setq gnus-dired-mail-mode 'mu4e-user-agent)
    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

**** Encrypt/Decrypt

Config for encrypt/decrypt emails

#+BEGIN_SRC emacs-lisp
     (setq mu4e-decryption-policy t)

;; ; Sign the messages by default
;; (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
;; ;rename to signature.asc
;; (defadvice mml2015-sign (after mml2015-sign-rename (cont) act)
;;   (save-excursion
;;     (search-backward "Content-Type: application/pgp-signature")
;;     (goto-char (point-at-eol))
;;     (insert "; name=\"signature.asc\"; description=\"Digital signature\"")))
#+END_SRC

**** Attachment reminder

To avoid memory faults, as forget to attach a file after mention it
in the message's body.

#+BEGIN_SRC emacs-lisp
  ;; simple regexp used to check the message. Tweak to your own need.
  (defvar joe-message-attachment-regexp "\\(adjunto\\|attach\\)")
  ;; the function that checks the message
  (defun joe/message-check-attachment nil
    "Check if there is an attachment in the message if I claim it."
    (save-excursion
      (message-goto-body)
      (when (search-forward-regexp joe-message-attachment-regexp nil t nil)
        (message-goto-body)
        (unless (or (search-forward "<#part" nil t nil)
          (message-y-or-n-p
     "No attachment. Send the message ?" nil nil))
    (error "No message sent")))))
    ;; check is done just before sending the message
    (add-hook 'message-send-hook 'joe/message-check-attachment)
#+END_SRC
**** Open a mu4e search in a new frame

This is useful when you are composing a new email and need to do a
search in your emails to get a little context in the conversation.

#+BEGIN_SRC emacs-lisp
    (defun joe/mu4e-headers-search-in-new-frame
        (&optional expr prompt edit ignore-history)
            "Execute `mu4e-headers-search' in a new frame."
            (interactive)
            (select-frame (make-frame))
            (mu4e-headers-search expr prompt edit ignore-history))
#+END_SRC

*** Elfeed

[[https://github.com/skeeto/elfeed][Elfeed]] is an extensible web feed reader for Emacs, supporting both
Atom and RSS

*Search mode*

[[file:img/elfeed.png]]

| Binding | Call                           | Do                                          |
|---------+--------------------------------+---------------------------------------------|
| q       | quit-window                    | exit                                        |
| a       | elfeed-search-update--force    | refresh view of the feed listing            |
| A       | elfeed-update                  | fetch feed updates from the servers         |
| s       | elfeed-search-live-filter      | update the search filter (date & tags)      |
| RET     | elfeed-search-show-entry       | view selected entry in a buffer             |
| o       | elfeed-search-browse-url       | open selected entries in your browser       |
| y       | elfeed-search-yank             | copy selected entries URL to the clipboard  |
| r       | elfeed-search-untag-all-unread | mark selected entries as read               |
| u       | elfeed-search-tag-all-unread   | mark selected entries as unread             |
| +       | elfeed-search-tag-all          | add a specific tag to selected entries      |
| -       | elfeed-search-untag-all        | remove a specific tag from selected entries |
| E       |                                | open the feed urls file                     |

*Show mode*

[[file:img/elfeed_show.png]]
| Binding | Call                | Do                                  |
|---------+---------------------+-------------------------------------|
| q       | elfeed-kill-buffer  | exit the entry                      |
| g       | elfeed-show-refresh | refresh the entry                   |
| n       | elfeed-show-next    | go to the next entry                |
| p       | elfeed-show-prev    | go to the previous entry            |
| o       | elfeed-show-visit   | open the entry in your browser      |
| y       | elfeed-show-yank    | copy the entry URL to the clipboard |
| u       |                     | mark the entry as unread            |
| +       | elfeed-show-tag     | add tag to the entry                |
| -       | elfeed-show-untag   | remove tag from the entry           |
| SPC     | scroll-up           | scroll up the buffer                |
| S-SPC   | scroll-down         | scroll down the buffer              |


#+BEGIN_SRC emacs-lisp
  (require 'elfeed)

  ; Load the feeds file
  (load "~/.emacs.d/elfeed.el.gpg")

  ; Entries older than 2 weeks are marked as read
  (add-hook 'elfeed-new-entry-hook
          (elfeed-make-tagger :before "2 weeks ago"
                              :remove 'unread))

  (setq elfeed-db-directory "~/.emacs.d/tmp/elfeed")
  (setq elfeed-search-filter "@2-days-old +unread ")
#+END_SRC

*** Twittering-mode

[[https://github.com/kiwanami/emacs-calfw][Twittering-mode]] enables you to twit on Emacsen.

[[file:img/twittering_mode.png]]

| Binding   | Call                                           | Do                                    |
|-----------+------------------------------------------------+---------------------------------------|
| q         | twittering-kill-buffer                         | Kill buffer                           |
| Q         | twittering-edit-mode                           | Edit mode                             |
| j         | twittering-goto-next-status                    | Next Twitter                          |
| k         | twittering-goto-previous-status                | Previous Twitter                      |
| h         | twittering-switch-to-next-timeline             | Next Timeline                         |
| l         | twittering-switch-to-previous-timeline         | Previous Timeline                     |
| g         | beginning-of-buffer                            | Top of the Timeline                   |
| G         | end-of-buffer                                  | Bottom of the Timeline                |
| t         | twittering-update-status-interactive           | Post a tweet                          |
| X         | twittering-delete-status                       | Delete a own tweet                    |
| RET       | twittering-reply-to-user                       | Reply to user                         |
| r         | twittering-native-retweet                      | Retweet                               |
| R         | twittering-organic-retweet                     | Retweet & Edit                        |
| k         | twittering-direct-message                      | Direct Message                        |
| u         | twittering-current-timeline                    | Update Timeline                       |
| b         | twittering-favorite                            | Mark as Favorite                      |
| B         | twittering-unfavorite                          | Unmark as Favorite                    |
| f         | twittering-follow                              | Follow current user                   |
| F         | twittering-unfollow                            | Unfollow current user                 |
| i         | twittering-view-user-page                      | View user profile (Browser)           |
| /         | twittering-search                              | Search                                |
| .         | twittering-visit-timeline                      | Open a new Timeline                   |
| @         | twittering-other-user-timeline                 | Open the Timeline of the current user |
| T         | twittering-toggle-or-retrieve-replied-statuses | Show Thread                           |
| o         | twittering-click                               | Open item in a Browser                |
| TAB       | twittering-goto-next-thing                     | Go to next item                       |
| <backtab> | twittering-goto-previous-thing                 | Go to previous item                   |
| n         | twittering-goto-next-status-of-user            | Go to next current user's tweet       |
| p         | twittering-goto-previous-status-of-user        | Go to previous current user's tweet   |
| SPC       | twittering-scroll-up                           | Timeline scroll up                    |
| S-SPC     | twittering-scroll-down                         | Timeline scroll down                  |
| y         | twittering-push-uri-onto-kill-ring             | Yank current url                      |
| Y         | twittering-push-tweet-onto-kill-ring           | Yank current tweet                    |
| a         | twittering-toggle-activate-buffer              | Toggle Active Timeline                |

#+BEGIN_SRC emacs-lisp
    (setq twittering-use-master-password t)
    (setq twittering-icon-mode t)
    (setq twittering-use-icon-storage t)
    (setq twittering-icon-storage-file "~/.emacs.d/tmp/twittering-mode-icons.gz")
    (setq twittering-convert-fix-size 52)
    (setq twittering-initial-timeline-spec-string
          '(":home"))
    (setq twittering-edit-skeleton 'inherit-any)
    (setq twittering-display-remaining t)
    (setq twittering-status-format
        "%i  %S, %RT{%FACE[bold]{%S}} %@  %FACE[shadow]{%p%f%L%r}\n%FOLD[        ]{%T}\n")
#+END_SRC

**** Define my own bindings (based in [[https://github.com/alejandrogomez/turses][Turses]] style)

#+BEGIN_SRC emacs-lisp
    ; remove the current bindings
    (eval-after-load "twittering-mode"
        '(setq twittering-mode-map (make-sparse-keymap)))
    ; set the new bindings
    (add-hook 'twittering-mode-hook
             (lambda ()
               (mapc (lambda (pair)
                       (let ((key (car pair))
                             (func (cdr pair)))
                         (define-key twittering-mode-map
                           (read-kbd-macro key) func)))
                     '(
                       ("q" . twittering-kill-buffer)
                       ("Q" . twittering-edit-mode)
                       ("j" . twittering-goto-next-status)
                       ("k" . twittering-goto-previous-status)
                       ("h" . twittering-switch-to-next-timeline)
                       ("l" . twittering-switch-to-previous-timeline)
                       ("g" . beginning-of-buffer)
                       ("G" . end-of-buffer)
                       ("t" . twittering-update-status-interactive)
                       ("X" . twittering-delete-status)
                       ("RET" . twittering-reply-to-user)
                       ("r" . twittering-native-retweet)
                       ("R" . twittering-organic-retweet)
                       ("d" . twittering-direct-message)
                       ("u" . twittering-current-timeline)
                       ("b" . twittering-favorite)
                       ("B" . twittering-unfavorite)
                       ("f" . twittering-follow)
                       ("F" . twittering-unfollow)
                       ("i" . twittering-view-user-page)
                       ("/" . twittering-search)
                       ("." . twittering-visit-timeline)
                       ("@" . twittering-other-user-timeline)
                       ("T" . twittering-toggle-or-retrieve-replied-statuses)
                       ("o" . twittering-click)
                       ("TAB" . twittering-goto-next-thing)
                       ("<backtab>" . twittering-goto-previous-thing)
                       ("n" . twittering-goto-next-status-of-user)
                       ("p" . twittering-goto-previous-status-of-user)
                       ("SPC" . twittering-scroll-up)
                       ("S-SPC" . twittering-scroll-down)
                       ("y" . twittering-push-uri-onto-kill-ring)
                       ("Y" . twittering-push-tweet-onto-kill-ring)
                       ("a" . twittering-toggle-activate-buffer)
                      ))))
#+END_SRC

**** Spell checking on tweets

#+BEGIN_SRC emacs-lisp
    (add-hook 'twittering-edit-mode-hook (lambda () (flyspell-mode)))
#+END_SRC

* Footnotes

[fn:1] The Emacs logo is from the [[https://github.com/numixproject/numix-icon-theme-circle][Numix Circle icon theme]] and is Licensed under the GPL-3.0+
